<!DOCTYPE html><html lang="en"><head><meta charSet="utf-8"/><meta http-equiv="X-UA-Compatible" content="IE=edge"/><title>My First Transaction · Libra</title><meta name="viewport" content="width=device-width"/><meta name="generator" content="Docusaurus"/><meta name="description" content="This document will guide you through executing your first transaction on the Libra Blockchain. Before you follow the steps to execute your first transaction, we recommend that you read the following documents to familiarize yourself with the key aspects of the Libra ecosystem and the Libra protocol:"/><meta name="docsearch:language" content="en"/><meta property="og:title" content="My First Transaction · Libra"/><meta property="og:type" content="website"/><meta property="og:url" content="https://developers.libra.org/"/><meta property="og:description" content="This document will guide you through executing your first transaction on the Libra Blockchain. Before you follow the steps to execute your first transaction, we recommend that you read the following documents to familiarize yourself with the key aspects of the Libra ecosystem and the Libra protocol:"/><meta property="og:image" content="https://developers.libra.org/img/libra.png"/><meta name="twitter:card" content="summary"/><meta name="twitter:image" content="https://developers.libra.org/img/libra.png"/><link rel="shortcut icon" href="libra.ico"/><link rel="stylesheet" href="https://cdn.jsdelivr.net/docsearch.js/1/docsearch.min.css"/><link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/9.12.0/styles/default.min.css"/><link rel="alternate" type="application/atom+xml" href="atom.xml" title="Libra Blog ATOM Feed"/><link rel="alternate" type="application/rss+xml" href="feed.xml" title="Libra Blog RSS Feed"/><script type="text/javascript" src="buttons.js"></script><script type="text/javascript" src="code_block_buttons.js"></script><script type="text/javascript" src="cookie_banner.js"></script><script type="text/javascript" src="disable_adblock.js"></script><script type="text/javascript" src="segment.analytics.min.js"></script><script type="text/javascript" src="segment.js"></script><script type="text/javascript" src="clipboardjs.2.0.0.min.js"></script><script type="text/javascript" src="forms.js"></script><script src="scrollSpy.js"></script><link rel="stylesheet" href="main.css"/><script src="codetabs.js"></script></head><body class="sideNavVisible separateOnPageNav"><div class="fixedHeaderContainer"><div class="headerWrapper wrapper"><header><a href="https://developers.libra.org/"><img class="logo" src="libra-nav-logo.png" alt="Libra"/><h2 class="headerTitleWithLogo">Libra</h2></a><div class="navigationWrapper navigationSlider"><nav class="slidingNav"><ul class="nav-site nav-site-internal"><li class=""><a href="https://violas.io/">Home</a></li><li class="siteNavGroupActive"><a href="welcome-to-libra.htm" target="_self">Documentation</a></li><li class=""><a href="https://community.libra.org" target="_self">Community</a></li><li class=""><a href="blog_2.html" target="_self">Blog</a></li><li class=""><a href="https://libra.org" target="_self">libra.org</a></li><li class=""><a href="https://github.com/libra/libra" target="_self">GitHub</a></li><li class=""><a href="../lib_doc_en2cn/my-first-transaction.htm">中/EN</a></li><li class="navSearchWrapper reactNavSearchWrapper"><input type="text" id="search_input_react" placeholder="Search" title="Search"/></li></ul></nav></div></header></div></div><div class="navPusher"><div class="docMainWrapper wrapper"><div class="docsNavContainer" id="docsNav"><nav class="toc"><div class="toggleNav"><section class="navWrapper wrapper"><div class="navBreadcrumb wrapper"><div class="navToggle" id="navToggler"><div class="hamburger-menu"><div class="line1"></div><div class="line2"></div><div class="line3"></div></div></div><h2><i>›</i><span>Try Libra Core</span></h2><div class="tocToggler" id="tocToggler"><i class="icon-toc"></i></div></div><div class="navGroups"><div class="navGroup"><h3 class="navGroupCategoryTitle">Learn About Libra</h3><ul class=""><li class="navListItem"><a class="navItem" href="welcome-to-libra.htm">Welcome</a></li><li class="navListItem"><a class="navItem" href="libra-protocol.htm">Libra Protocol: Key Concepts</a></li><li class="navListItem"><a class="navItem" href="life-of-a-transaction.htm">Life of a Transaction</a></li><div class="navGroup subNavGroup"><h4 class="navGroupSubcategoryTitle">Technical Papers</h4><ul><li class="navListItem"><a class="navItem" href="the-libra-blockchain-paper.htm">The Libra Blockchain</a></li><li class="navListItem"><a class="navItem" href="move-paper.htm">Move: A Language With Programmable Resources</a></li><li class="navListItem"><a class="navItem" href="state-machine-replication-paper.htm">State Machine Replication in the Libra Blockchain</a></li></ul></div></ul></div><div class="navGroup"><h3 class="navGroupCategoryTitle">Try Libra Core</h3><ul class=""><li class="navListItem navListItemActive"><a class="navItem" href="my-first-transaction.htm">My First Transaction</a></li><li class="navListItem"><a class="navItem" href="move-overview.htm">Getting Started With Move</a></li><li class="navListItem"><a class="navItem" href="run-local-network.htm">Run a Local Network</a></li><li class="navListItem"><a class="navItem" href="run-move-locally.htm">Run Move Programs Locally</a></li></ul></div><div class="navGroup"><h3 class="navGroupCategoryTitle">Community</h3><ul class=""><li class="navListItem"><a class="navItem" href="libra-open-source-paper.htm">Libra Open Source</a></li><li class="navListItem"><a class="navItem" href="contributing.htm">Contribution Guide</a></li><li class="navListItem"><a class="navItem" href="coding-guidelines.htm">Coding Guidelines</a></li><li class="navListItem"><a class="navItem" href="security.htm">Reporting Vulnerabilities</a></li></ul></div><div class="navGroup"><h3 class="navGroupCategoryTitle">Libra Codebase</h3><ul class=""><li class="navListItem"><a class="navItem" href="libra-core-overview.htm">Libra Core Overview</a></li><div class="navGroup subNavGroup"><h4 class="navGroupSubcategoryTitle">READMEs</h4><ul><li class="navListItem"><a class="navItem" href="admission-control.htm">Admission Control</a></li><li class="navListItem"><a class="navItem" href="bytecode-verifier.htm">Bytecode Verifier</a></li><li class="navListItem"><a class="navItem" href="consensus.htm">Consensus</a></li><li class="navListItem"><a class="navItem" href="crypto.htm">Crypto</a></li><li class="navListItem"><a class="navItem" href="execution.htm">Execution</a></li><li class="navListItem"><a class="navItem" href="mempool.htm">Mempool</a></li><li class="navListItem"><a class="navItem" href="ir-to-bytecode.htm">Move IR Compiler</a></li><li class="navListItem"><a class="navItem" href="move-language.htm">Move Language</a></li><li class="navListItem"><a class="navItem" href="network.htm">Network</a></li><li class="navListItem"><a class="navItem" href="storage.htm">Storage</a></li><li class="navListItem"><a class="navItem" href="vm.htm">Virtual Machine</a></li></ul></div></ul></div><div class="navGroup"><h3 class="navGroupCategoryTitle">Reference</h3><ul class=""><li class="navListItem"><a class="navItem" href="libra-cli.htm">Libra CLI</a></li><li class="navListItem"><a class="navItem" href="glossary.htm">Glossary</a></li></ul></div></div></section></div><script>
            var coll = document.getElementsByClassName('collapsible');
            var checkActiveCategory = true;
            for (var i = 0; i < coll.length; i++) {
              var links = coll[i].nextElementSibling.getElementsByTagName('*');
              if (checkActiveCategory){
                for (var j = 0; j < links.length; j++) {
                  if (links[j].classList.contains('navListItemActive')){
                    coll[i].nextElementSibling.classList.toggle('hide');
                    coll[i].childNodes[1].classList.toggle('rotate');
                    checkActiveCategory = false;
                    break;
                  }
                }
              }

              coll[i].addEventListener('click', function() {
                var arrow = this.childNodes[1];
                arrow.classList.toggle('rotate');
                var content = this.nextElementSibling;
                content.classList.toggle('hide');
              });
            }

            document.addEventListener('DOMContentLoaded', function() {
              createToggler('#navToggler', '#docsNav', 'docsSliderActive');
              createToggler('#tocToggler', 'body', 'tocActive');

              var headings = document.querySelector('.toc-headings');
              headings && headings.addEventListener('click', function(event) {
                var el = event.target;
                while(el !== headings){
                  if (el.tagName === 'A') {
                    document.body.classList.remove('tocActive');
                    break;
                  } else{
                    el = el.parentNode;
                  }
                }
              }, false);

              function createToggler(togglerSelector, targetSelector, className) {
                var toggler = document.querySelector(togglerSelector);
                var target = document.querySelector(targetSelector);

                if (!toggler) {
                  return;
                }

                toggler.onclick = function(event) {
                  event.preventDefault();

                  target.classList.toggle(className);
                };
              }
            });
        </script></nav></div><div class="container mainContainer"><div class="wrapper"><div class="post"><header class="postHeader"><a class="edit-page-link button" href="https://github.com/libra/website/edit/master/docs/my-first-transaction.md" target="_blank" rel="noreferrer noopener">Edit</a><h1 class="postHeaderTitle">My First Transaction</h1></header><article><div><span><p>This document will guide you through executing your first transaction on the Libra Blockchain. Before you follow the steps to execute your first transaction, we recommend that you read the following documents to familiarize yourself with the key aspects of the Libra ecosystem and the Libra protocol:</p>
<ul>
<li><a href="welcome-to-libra.htm">Welcome</a></li>
<li><a href="libra-protocol.htm">The Libra protocol: Key Concepts</a></li>
</ul>
<p>We provide a command line interface (CLI) client to interact with the blockchain.</p>
<h2><a class="anchor" aria-hidden="true" id="assumptions"></a><a href="my-first-transaction.htm#assumptions" aria-hidden="true" class="hash-link"><svg class="hash-link-icon" aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Assumptions</h2>
<p>All commands in this document assume that:</p>
<ul>
<li>You are running on a Linux (Red Hat or Debian-based) or macOS system.</li>
<li>You have a stable connection to the internet.</li>
<li><code>git</code> is installed on your system.</li>
<li>Homebrew is installed on a macOS system.</li>
<li><code>yum</code>or <code>apt-get</code> is installed on a Linux system.</li>
</ul>
<h2><a class="anchor" aria-hidden="true" id="steps-to-submit-a-transaction"></a><a href="my-first-transaction.htm#steps-to-submit-a-transaction" aria-hidden="true" class="hash-link"><svg class="hash-link-icon" aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Steps to Submit a Transaction</h2>
<p>In this example, we'll download the necessary Libra components and execute a transaction between two users: Alice and Bob.</p>
<p>Perform the following steps to submit a transaction to a validator node on the Libra testnet:</p>
<ol>
<li><a href="my-first-transaction.htm#clone-and-build-libra-core">Clone and build Libra Core</a>.</li>
<li><a href="my-first-transaction.htm#build-libra-cli-client-and-connect-to-the-testnet">Build the Libra CLI client and connect to the testnet</a>.</li>
<li><a href="my-first-transaction.htm#create-alice-s-and-bob-s-account">Create Alice’s and Bob’s accounts</a>.</li>
<li><a href="my-first-transaction.htm#add-libra-coins-to-alice-s-and-bob-s-accounts">Mint coins and add to Alice’s and Bob’s accounts</a>.</li>
<li><a href="my-first-transaction.htm#submit-a-transaction">Submit a transaction</a>.</li>
</ol>
<h2><a class="anchor" aria-hidden="true" id="clone-and-build-libra-core"></a><a href="my-first-transaction.htm#clone-and-build-libra-core" aria-hidden="true" class="hash-link"><svg class="hash-link-icon" aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Clone and Build Libra Core</h2>
<h3><a class="anchor" aria-hidden="true" id="clone-the-libra-core-repository"></a><a href="my-first-transaction.htm#clone-the-libra-core-repository" aria-hidden="true" class="hash-link"><svg class="hash-link-icon" aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Clone the Libra Core Repository</h3>
<pre><code class="hljs css language-bash">git <span class="hljs-built_in">clone</span> https://github.com/libra/libra.git
</code></pre>
<h3><a class="anchor" aria-hidden="true" id="checkout-the-testnet-branch"></a><a href="my-first-transaction.htm#checkout-the-testnet-branch" aria-hidden="true" class="hash-link"><svg class="hash-link-icon" aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Checkout the testnet Branch</h3>
<pre><code class="hljs css language-bash">git checkout testnet
</code></pre>
<h3><a class="anchor" aria-hidden="true" id="install-dependencies"></a><a href="my-first-transaction.htm#install-dependencies" aria-hidden="true" class="hash-link"><svg class="hash-link-icon" aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Install Dependencies</h3>
<p>To setup Libra Core, change to the <code>libra</code> directory and run the setup script to install the dependencies, as shown below:</p>
<pre><code class="hljs">cd libra
./scripts/dev_setup.sh
</code></pre>
<p>The setup script performs these actions:</p>
<ul>
<li>Installs rustup — rustup is an installer for the Rust programming language, which Libra Core is implemented in.</li>
<li>Installs the required versions of the rust-toolchain.</li>
<li>Installs CMake — to manage the build process.</li>
<li>Installs protoc — a compiler for protocol buffers.</li>
<li>Installs Go — for building protocol buffers.</li>
</ul>
<p>If your setup fails, see <a href="my-first-transaction.htm#setup">Troubleshooting</a></p>
<h2><a class="anchor" aria-hidden="true" id="build-libra-cli-client-and-connect-to-the-testnet"></a><a href="my-first-transaction.htm#build-libra-cli-client-and-connect-to-the-testnet" aria-hidden="true" class="hash-link"><svg class="hash-link-icon" aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Build Libra CLI Client and Connect to the Testnet</h2>
<p>To connect to a validator node running on the Libra testnet, run the client as shown below.</p>
<pre><code class="hljs css language-bash">./scripts/cli/start_cli_testnet.sh
</code></pre>
<p>This command builds and runs the client utilizing cargo (Rust’s package manager) and connects the client to a validator node on the testnet.</p>
<p>Once the client connects to a node on the testnet, you will see the following output.  To quit the client at any time, use the <code>quit</code> command.</p>
<pre><code class="hljs">usage: &lt;command&gt; &lt;args&gt;

Use the following commands:

account | a
  Account operations
query | q
  Query operations
transfer | transferb | t | tb
  &lt;sender_account_address&gt;|&lt;sender_account_ref_id&gt; &lt;receiver_account_address&gt;|&lt;receiver_account_ref_id&gt; &lt;number_of_coins&gt; [gas_unit_price (default=0)] [max_gas_amount (default 10000)] Suffix 'b' is for blocking.
  Transfer coins from account to another.
help | h
  Prints this help
quit | q!
  Exit this client


Please, input commands:

libra%
</code></pre>
<p>If you have problems building the client and connecting to the testnet, refer to <a href="my-first-transaction.htm#client-build-and-run">Troubleshooting</a>.</p>
<blockquote class="block_note">
<p><strong>Note</strong>: If you would like to run a validator node locally on your system, follow the instructions in <a href="my-first-transaction.htm#run-a-local-validator-node">Run a Local Validator Node</a>. The instructions for creating accounts, minting coins, and performing a transaction are the same as that for a node on testnet.</p>
</blockquote>
<h2><a class="anchor" aria-hidden="true" id="create-alices-and-bobs-account"></a><a href="my-first-transaction.htm#create-alices-and-bobs-account" aria-hidden="true" class="hash-link"><svg class="hash-link-icon" aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Create Alice’s and Bob’s Account</h2>
<p>Once your client is connected to the testnet, you can run CLI commands to create new accounts.  We will walk you through creating accounts for two users (let's call them Alice and Bob).</p>
<h3><a class="anchor" aria-hidden="true" id="step-1-check-if-the-cli-client-is-running-on-your-system"></a><a href="my-first-transaction.htm#step-1-check-if-the-cli-client-is-running-on-your-system" aria-hidden="true" class="hash-link"><svg class="hash-link-icon" aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Step 1: Check If the CLI Client Is Running on Your System</h3>
<p>A <strong>libra%</strong> command line prompt indicates that your Libra CLI client is running. To see the help information for the <code>account</code> command enter “account” as shown below:</p>
<pre><code class="hljs css language-plaintext">libra% account
usage: account &lt;arg&gt;

Use the following args for this command:

create | c
  Create an account. Returns reference ID to use in other operations
list | la
  Print all accounts that were created or loaded
recover | r &lt;file path&gt;
  Recover Libra wallet from the file path
write | w &lt;file name&gt;
  Save Libra wallet mnemonic recovery seed to disk
mint | mintb | m | mb &lt;receiver account&gt; &lt;number of coins&gt;
  Mint coins to the account. Suffix 'b' is for blocking
</code></pre>
<h3><a class="anchor" aria-hidden="true" id="step-2-create-alices-account"></a><a href="my-first-transaction.htm#step-2-create-alices-account" aria-hidden="true" class="hash-link"><svg class="hash-link-icon" aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Step 2: Create Alice’s Account</h3>
<p>Note that creating an account using the CLI does not update the blockchain, it just creates a local key-pair.</p>
<p>To create Alice’s account, enter this command:</p>
<p><code>libra% account create</code></p>
<p>Sample output on success:</p>
<pre><code class="hljs css language-plaintext">&gt;&gt; Creating/retrieving next account from wallet
Created/retrieved account #0 address 3ed8e5fafae4147b2a105a0be2f81972883441cfaaadf93fc0868e7a0253c4a8
</code></pre>
<p>0 is the index of Alice’s account, and the hex string is the address of Alice’s account. The index is just a way to refer to Alice’s account. The account index is a local CLI index that can be used in other CLI commands for users to conveniently refer to the accounts they have created. The index is meaningless to the blockchain. Alice’s account will be created on the blockchain only when either money is added to Alice’s account via minting, or money is transferred to Alice’s account via a transfer from another user. Note that you may also use the hex address in CLI commands. The account index is just a convenience wrapper around the account address.</p>
<h3><a class="anchor" aria-hidden="true" id="step-3-create-bobs-account"></a><a href="my-first-transaction.htm#step-3-create-bobs-account" aria-hidden="true" class="hash-link"><svg class="hash-link-icon" aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Step 3: Create Bob’s Account</h3>
<p>To create Bob’s account, repeat the account creation command:</p>
<p><code>libra% account create</code></p>
<p>Sample output on success:</p>
<pre><code class="hljs css language-plaintext">&gt;&gt; Creating/retrieving next account from wallet
Created/retrieved account #1 address 8337aac709a41fe6be03cad8878a0d4209740b1608f8a81566c9a7d4b95a2ec7
</code></pre>
<p>1 is the index for Bob’s account, and the hex string is the address of Bob’s account.
For more details on index refer to <a href="my-first-transaction.htm#step-2-create-alice-s-account">Create Alice’s Account.</a></p>
<h3><a class="anchor" aria-hidden="true" id="step-4-optional-list-accounts"></a><a href="my-first-transaction.htm#step-4-optional-list-accounts" aria-hidden="true" class="hash-link"><svg class="hash-link-icon" aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Step 4 (Optional): List Accounts</h3>
<p>To list the accounts you have created, enter this command:</p>
<p><code>libra% account list</code></p>
<p>Sample output on success:</p>
<pre><code class="hljs css language-plaintext">User account index: 0, address: 3ed8e5fafae4147b2a105a0be2f81972883441cfaaadf93fc0868e7a0253c4a8, sequence number: 0
User account index: 1, address: 8337aac709a41fe6be03cad8878a0d4209740b1608f8a81566c9a7d4b95a2ec7, sequence number: 0
</code></pre>
<p>The sequence number for an account indicates the number of transactions that have been sent from that account. It is incremented every time a transaction sent from that account is executed and stored in the blockchain. To know more, refer to <a href="glossary.htm#sequence-number">sequence number</a>.</p>
<h2><a class="anchor" aria-hidden="true" id="add-libra-coins-to-alices-and-bobs-accounts"></a><a href="my-first-transaction.htm#add-libra-coins-to-alices-and-bobs-accounts" aria-hidden="true" class="hash-link"><svg class="hash-link-icon" aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Add Libra Coins to Alice’s and Bob’s Accounts</h2>
<p>Minting and adding coins to accounts on testnet is done via Faucet. Faucet is a service that runs along with the testnet. This service only exists to facilitate minting coins for testnet and will not exist for <a href="glossary.htm#mainnet">mainnet</a>. It creates Libra with no real-world value. Assuming you have <a href="my-first-transaction.htm#create-alice-s-and-bob-s-account">created Alice’s and Bob’s account</a>, with index 0 and index 1 respectively, you can follow the steps below to add Libra to both accounts.</p>
<h3><a class="anchor" aria-hidden="true" id="step-1-add-110-lbr-to-alices-account"></a><a href="my-first-transaction.htm#step-1-add-110-lbr-to-alices-account" aria-hidden="true" class="hash-link"><svg class="hash-link-icon" aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Step 1: Add 110 LBR to Alice’s Account</h3>
<p>To mint Libra and add to Alice’s account, enter this command:</p>
<p><code>libra% account mint 0 110</code></p>
<ul>
<li>0 is the index of Alice’s account.</li>
<li>110  is the amount of Libra to be added to Alice’s account.</li>
</ul>
<p>A successful account mint command will also create Alice’s account on the blockchain.</p>
<p>Sample output on success:</p>
<pre><code class="hljs css language-plaintext">&gt;&gt; Minting coins
Mint request submitted
</code></pre>
<p>Note that when the request is submitted, it means that it has been added to the mempool (of a validator node on testnet) successfully. It does not necessarily imply that it will be successfully completed. Later, we will query the account balance to confirm if minting was successful.</p>
<p>If your account mint command did not submit your request successfully, refer to
<a href="my-first-transaction.htm#minting-and-adding-money-to-account">Troubleshooting</a></p>
<h3><a class="anchor" aria-hidden="true" id="step-2-add-52-lbr-to-bobs-account"></a><a href="my-first-transaction.htm#step-2-add-52-lbr-to-bobs-account" aria-hidden="true" class="hash-link"><svg class="hash-link-icon" aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Step 2: Add 52 LBR to Bob’s Account</h3>
<p>To mint Libra and add to Bob’s account, enter this command:</p>
<p><code>libra% account mint 1 52</code></p>
<ul>
<li>1 is the index of Bob’s account.</li>
<li>52 is the amount of Libra to be added to Bob’s account.</li>
<li>A successful account mint command will also create Bob’s account on the blockchain. Another way to create Bob’s account on the blockchain is to transfer money from Alice’s account to Bob’s account.</li>
</ul>
<p>Sample output on success:</p>
<pre><code class="hljs css language-plaintext">&gt;&gt; Minting coins
Mint request submitted
</code></pre>
<p>If your account mint command did not submit your request successfully, refer to
<a href="my-first-transaction.htm#minting-and-adding-money-to-account">Troubleshooting</a></p>
<h3><a class="anchor" aria-hidden="true" id="step-3-check-the-balance"></a><a href="my-first-transaction.htm#step-3-check-the-balance" aria-hidden="true" class="hash-link"><svg class="hash-link-icon" aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Step 3: Check the Balance</h3>
<p>To check the balance in Alice’s account, enter this command:</p>
<p><code>libra% query balance 0</code></p>
<p>Sample output on success:</p>
<p><code>Balance is: 110</code></p>
<p>To check the balance in Bob’s account, enter this command:</p>
<p><code>libra% query balance 1</code></p>
<p>Sample output on success:</p>
<p><code>Balance is: 52</code></p>
<h2><a class="anchor" aria-hidden="true" id="submit-a-transaction"></a><a href="my-first-transaction.htm#submit-a-transaction" aria-hidden="true" class="hash-link"><svg class="hash-link-icon" aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Submit a Transaction</h2>
<p>Before we submit a transaction to transfer Libra from Alice’s account to Bob’s account, we will query the sequence number of each account. This will help us understand how executing a transaction changes the sequence number of each account.</p>
<h3><a class="anchor" aria-hidden="true" id="query-the-accounts-sequence-numbers"></a><a href="my-first-transaction.htm#query-the-accounts-sequence-numbers" aria-hidden="true" class="hash-link"><svg class="hash-link-icon" aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Query the Accounts’ Sequence Numbers</h3>
<pre><code class="hljs css language-plaintext">libra% query sequence 0
&gt;&gt; Getting current sequence number
Sequence number is: 0
libra% query sequence 1
&gt;&gt; Getting current sequence number
Sequence number is: 0
</code></pre>
<p>In <code>query sequence 0</code>, 0 is the index of Alice’s account. A sequence number of 0 for both Alice’s and Bob’s accounts indicates that no transactions from either Alice’s or Bob’s account has been executed so far.</p>
<h3><a class="anchor" aria-hidden="true" id="transfer-money"></a><a href="my-first-transaction.htm#transfer-money" aria-hidden="true" class="hash-link"><svg class="hash-link-icon" aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Transfer Money</h3>
<p>To submit a transaction to transfer 10 LBR from Alice’s account to Bob’s account, enter this command:</p>
<p><code>libra% transfer 0 1 10</code></p>
<ul>
<li>0 is the index of Alice’s account.</li>
<li>1 is the index of Bob’s account.</li>
<li>10 is the number of Libra to transfer from Alice’s account to Bob’s account.</li>
</ul>
<p>Sample output on success:</p>
<pre><code class="hljs css language-plaintext">&gt;&gt; Transferring
Transaction submitted to validator
To query for transaction status, run: query txn_acc_seq 0 0 &lt;fetch_events=true|false&gt;
</code></pre>
<p>You can use the command <code>query txn_acc_seq 0 0 true</code> (transaction by account and sequence number) to retrieve the information about the transaction you just submitted. The first parameter is the local index of the sender account, and the second parameter is the sequence number of the account. To see a sample output of this command refer to <a href="my-first-transaction.htm#query-transaction-by-account-and-sequence-number">Sample Outputs</a>.</p>
<p>You just submitted your transaction to a validator node on testnet, and it was included in the <a href="glossary.htm#mempool">mempool</a> of the validator. This doesn't necessarily mean your transaction has been executed. In theory, if the system were slow or overloaded, it would take some time to see the results, and you may have to check multiple times by querying the accounts. To query an account with index 0, you can use the command  <code>query account_state 0.</code> The expected output is shown in the <a href="my-first-transaction.htm#query-events">Sample Outputs</a> section</p>
<p>To troubleshoot the transfer command, refer to <a href="my-first-transaction.htm#the-transfer-command">Troubleshooting</a>.</p>
<p><strong>The Blocking Transfer Command</strong>: You can use the <code>transferb</code> command (as shown below), instead of the <code>transfer</code> command. <code>transferb</code> will submit the transaction and return to the client prompt only after the transaction has been committed to the blockchain. An example is shown below:</p>
<p><code>libra% transferb 0 1 10</code></p>
<p>Refer to <a href="life-of-a-transaction.htm">Life of a Transaction</a> for an understanding of the lifecycle of a transaction from submission to execution and storage.</p>
<h3><a class="anchor" aria-hidden="true" id="query-sequence-number-after-transfer"></a><a href="my-first-transaction.htm#query-sequence-number-after-transfer" aria-hidden="true" class="hash-link"><svg class="hash-link-icon" aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Query Sequence Number After Transfer</h3>
<pre><code class="hljs css language-plaintext">libra% query sequence 0
&gt;&gt; Getting current sequence number
Sequence number is: 1
libra% query sequence 1
&gt;&gt; Getting current sequence number
Sequence number is: 0
</code></pre>
<p>The sequence number of 1 for Alice’s account (index 0) indicates that one transaction has been sent from Alice’s account so far. The sequence number of 0 for Bob’s account (index 1) indicates that no transaction has been sent from Bob’s account so far. Every time a transaction is sent from an account, the sequence number is incremented by 1.</p>
<h3><a class="anchor" aria-hidden="true" id="check-the-balance-in-both-accounts-after-transfer"></a><a href="my-first-transaction.htm#check-the-balance-in-both-accounts-after-transfer" aria-hidden="true" class="hash-link"><svg class="hash-link-icon" aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Check the Balance in Both Accounts After Transfer</h3>
<p>To check the final balance in both accounts, query the balance again for each account as you did in <a href="my-first-transaction.htm#step-3-check-the-balance">this step</a>. If your transaction (transfer) executed successfully, you should see 100 LBR in Alice’s account and 62 LBR in Bob’s account.</p>
<pre><code class="hljs css language-plaintext">libra% query balance 0
Balance is: 100
libra% query balance 1
Balance is: 62
</code></pre>
<h3><a class="anchor" aria-hidden="true" id="congratulations"></a><a href="my-first-transaction.htm#congratulations" aria-hidden="true" class="hash-link"><svg class="hash-link-icon" aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Congratulations!</h3>
<p>You have successfully executed your transaction on the Libra testnet and transferred 10 LBR from Alice’s account to Bob’s account!</p>
<h2><a class="anchor" aria-hidden="true" id="troubleshooting"></a><a href="my-first-transaction.htm#troubleshooting" aria-hidden="true" class="hash-link"><svg class="hash-link-icon" aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Troubleshooting</h2>
<h3><a class="anchor" aria-hidden="true" id="setup"></a><a href="my-first-transaction.htm#setup" aria-hidden="true" class="hash-link"><svg class="hash-link-icon" aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Setup</h3>
<ul>
<li>Update Rust:
<ul>
<li>Run <code>rustup update</code> from your libra directory.</li>
</ul></li>
<li>Update protoc:
<ul>
<li>Update <code>protoc</code> to version 3.6.0 or above.</li>
</ul></li>
<li>Re-run setup script from your libra directory:
<ul>
<li><code>./scripts/dev_setup.sh</code></li>
</ul></li>
</ul>
<h3><a class="anchor" aria-hidden="true" id="client-build-and-run"></a><a href="my-first-transaction.htm#client-build-and-run" aria-hidden="true" class="hash-link"><svg class="hash-link-icon" aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Client Build and Run</h3>
<p>If you are experiencing build failures, try to remove the cargo lock file from the libra directory:</p>
<ul>
<li><code>rm Cargo.lock</code></li>
</ul>
<p>If your client did not connect to the testnet:</p>
<ul>
<li>Check your internet connection.</li>
<li>Ensure that you are using the latest version of the client. Pull the latest Libra Core and rerun the client:
<ul>
<li><code>./scripts/cli/start_cli_testnet.sh</code></li>
</ul></li>
</ul>
<h3><a class="anchor" aria-hidden="true" id="minting-and-adding-money-to-account"></a><a href="my-first-transaction.htm#minting-and-adding-money-to-account" aria-hidden="true" class="hash-link"><svg class="hash-link-icon" aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Minting and Adding Money to Account</h3>
<ul>
<li><p>If the validator node you connected to on testnet is unavailable, you will get a “Server unavailable” message as shown below:</p>
<pre><code class="hljs css language-plaintext">libra% account mint 0 110
&gt;&gt; Minting coins
[ERROR] Error minting coins: Server unavailable, please retry and/or check **if** host passed to the client is running
</code></pre></li>
<li><p>If your balance was not updated after submitting a transaction, wait a moment and query the balance again. There may be a delay if the blockchain is experiencing a very high volume of transactions.  If your balance still is not updated, please try minting again.</p></li>
<li><p>To check if an account exists, query the account state. For an account with index 0 enter this:</p>
<p><code>libra% query account_state 0</code></p></li>
</ul>
<h3><a class="anchor" aria-hidden="true" id="the-transfer-command"></a><a href="my-first-transaction.htm#the-transfer-command" aria-hidden="true" class="hash-link"><svg class="hash-link-icon" aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>The Transfer Command</h3>
<p>If the testnet validator node (your client was connected to) is unavailable or your connection to the testnet has timed-out, you will see this error:</p>
<pre><code class="hljs css language-plaintext">libra% transfer 0 1 10
&gt;&gt; Transferring
[ERROR] Failed to perform transaction: Server unavailable, please retry and/or check if host passed to the client is running
</code></pre>
<p>To troubleshoot transfer errors:</p>
<ul>
<li>Check the connection to testnet.</li>
<li>Query the sender account to make sure it exists. Use the following command for an account with index 0:
<ul>
<li><code>query account_state 0</code></li>
</ul></li>
<li>You can try quitting the client using <code>quit</code> or <code>q!</code>, and rerun the following command to connect to the testnet:
<ul>
<li><code>./scripts/cli/start_cli_testnet.sh</code> from the libra directory</li>
</ul></li>
</ul>
<h2><a class="anchor" aria-hidden="true" id="sample-outputs-of-additional-query-commands"></a><a href="my-first-transaction.htm#sample-outputs-of-additional-query-commands" aria-hidden="true" class="hash-link"><svg class="hash-link-icon" aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Sample Outputs of Additional Query Commands</h2>
<h3><a class="anchor" aria-hidden="true" id="query-transaction-by-account-and-sequence-number"></a><a href="my-first-transaction.htm#query-transaction-by-account-and-sequence-number" aria-hidden="true" class="hash-link"><svg class="hash-link-icon" aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Query Transaction by Account and Sequence Number</h3>
<p>This example will query for a single transaction's details using the account and sequence number.</p>
<pre><code class="hljs css language-plaintext">libra% query txn_acc_seq 0 0 true
&gt;&gt; Getting committed transaction by account and sequence number
Committed transaction: SignedTransaction {
 { raw_txn: RawTransaction {
    sender: 3ed8e5fafae4147b2a105a0be2f81972883441cfaaadf93fc0868e7a0253c4a8,
    sequence_number: 0,
    payload: {,
      transaction: peer_to_peer_transaction,
      args: [
        {ADDRESS: 8337aac709a41fe6be03cad8878a0d4209740b1608f8a81566c9a7d4b95a2ec7},
        {U64: 10000000},
      ]
    },
    max_gas_amount: 10000,
    gas_unit_price: 0,
    expiration_time: 1560466424s,
},
 public_key: 55af3fe3f28550a2f1e5ebf073ef193feda44344d94c463b48be202aa0b3255d,
 signature: Signature( R: CompressedEdwardsY: [210, 23, 214, 62, 228, 179, 64, 147, 81, 159, 180, 138, 100, 211, 111, 139, 178, 148, 81, 1, 240, 135, 148, 145, 104, 234, 227, 239, 198, 153, 13, 199], s: Scalar{
  bytes: [203, 76, 105, 49, 64, 130, 162, 81, 22, 237, 159, 26, 80, 181, 111, 94, 84, 6, 152, 126, 181, 192, 62, 103, 130, 94, 246, 174, 139, 214, 3, 15],
} ),
 }
 }
Events:
ContractEvent { access_path: AccessPath { address: 3ed8e5fafae4147b2a105a0be2f81972883441cfaaadf93fc0868e7a0253c4a8, type: Resource, hash: "217da6c6b3e19f1825cfb2676daecce3bf3de03cf26647c78df00b371b25cc97", suffix: "/sent_events_count/" } , index: 0, event_data: AccountEvent { account: 8337aac709a41fe6be03cad8878a0d4209740b1608f8a81566c9a7d4b95a2ec7, amount: 10000000 } }
ContractEvent { access_path: AccessPath { address: 8337aac709a41fe6be03cad8878a0d4209740b1608f8a81566c9a7d4b95a2ec7, type: Resource, hash: "217da6c6b3e19f1825cfb2676daecce3bf3de03cf26647c78df00b371b25cc97", suffix: "/received_events_count/" } , index: 0, event_data: AccountEvent { account: 3ed8e5fafae4147b2a105a0be2f81972883441cfaaadf93fc0868e7a0253c4a8, amount: 10000000 } }
</code></pre>
<p>Note that the transaction amount is shown in microlibra.</p>
<h3><a class="anchor" aria-hidden="true" id="query-events"></a><a href="my-first-transaction.htm#query-events" aria-hidden="true" class="hash-link"><svg class="hash-link-icon" aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Query Events</h3>
<p>In the following example, we will query for “sent” events from the account at reference index 0.  You will notice there is a single event since we sent one transaction from this account.  The proof of the current state is also returned so that verification can be performed that no events are missing - this is done when the query does not return “limit” events.</p>
<pre><code class="hljs css language-plaintext">libra% query event 0 sent 0 true 10
&gt;&gt; Getting events by account and event type.
EventWithProof {
  transaction_version: 3,
  event_index: 0,
  event: ContractEvent { access_path: AccessPath { address: e7460e02058b36d28e8eef03f0834c605d3d6c57455b8ec9c3f0a3c8b89f248b, type: Resource, hash: "217da6c6b3e19f1825cfb2676daecce3bf3de03cf26647c78df00b371b25cc97", suffix: "/sent_events_count/" } , index: 0, event_data: AccountEvent { account: 46efbad798a739c088e0e98dd9d592c27c7eb45ba1f8ccbdfc00bd4d7f2947f3, amount: 10000000 } },
  proof: EventProof { ledger_info_to_transaction_info_proof: AccumulatorProof { siblings: [HashValue(62570ae9a994bcb20c03c055667a4966fa50d0f17867dd5819465072fd2c58ba), HashValue(cce2cf325714511e7d04fa5b48babacd5af943198e6c1ac3bdd39c53c87cb84c)] }, transaction_info: TransactionInfo { signed_transaction_hash: HashValue(69bed01473e0a64140d96e46f594bc4b463e88e244b694e962b7e19fde17f30d), state_root_hash: HashValue(5809605d5eed94c73e57f615190c165b11c5e26873012285cc6b131e0817c430), event_root_hash: HashValue(645df3dee8f53a0d018449392b8e9da814d258da7346cf64cd96824f914e68f9), gas_used: 0 }, transaction_info_to_event_proof: AccumulatorProof { siblings: [HashValue(5d0e2ebf0952f0989cb5b38b2a9b52a09e8d804e893cb99bf9fa2c74ab304bb1)] } }
}
Last event state: Some(
    AccountStateWithProof {
        version: 3,
        blob: Some(
            AccountStateBlob {
             Raw: 0x010000002100000001217da6c6b3e19f1825cfb2676daecce3bf3de03cf26647c78df00b371b25cc974400000020000000e7460e02058b36d28e8eef03f0834c605d3d6c57455b8ec9c3f0a3c8b89f248b00e1f50500000000000000000000000001000000000000000100000000000000
             Decoded: Ok(
                AccountResource {
                    balance: 100000000,
                    sequence_number: 1,
                    authentication_key: 0xe7460e02058b36d28e8eef03f0834c605d3d6c57455b8ec9c3f0a3c8b89f248b,
                    sent_events_count: 1,
                    received_events_count: 0,
                },
            )
             },
        ),
        proof: AccountStateProof {
            ledger_info_to_transaction_info_proof: AccumulatorProof {
                siblings: [
                    HashValue(62570ae9a994bcb20c03c055667a4966fa50d0f17867dd5819465072fd2c58ba),
                    HashValue(cce2cf325714511e7d04fa5b48babacd5af943198e6c1ac3bdd39c53c87cb84c),
                ],
            },
            transaction_info: TransactionInfo {
                signed_transaction_hash: HashValue(69bed01473e0a64140d96e46f594bc4b463e88e244b694e962b7e19fde17f30d),
                state_root_hash: HashValue(5809605d5eed94c73e57f615190c165b11c5e26873012285cc6b131e0817c430),
                event_root_hash: HashValue(645df3dee8f53a0d018449392b8e9da814d258da7346cf64cd96824f914e68f9),
                gas_used: 0,
            },
            transaction_info_to_account_proof: SparseMerkleProof {
                leaf: Some(
                    (
                        HashValue(c0fbd63b0ae4abfe57c8f24f912f164ba0537741e948a65f00d3fae0f9373981),
                        HashValue(fc45057fd64606c7ca40256b48fbe486660930bfef1a9e941cafcae380c25871),
                    ),
                ),
                siblings: [
                    HashValue(4136803b3ba779bb2c1daae7360f3f839e6fef16ae742590a6698b350a5fc376),
                    HashValue(5350415253455f4d45524b4c455f504c414345484f4c4445525f484153480000),
                    HashValue(a9a6bda22dd6ee78ddd3a42da152b9bd39797b7da738e9d6023f407741810378),
                ],
            },
        },
    },
)
</code></pre>
<h3><a class="anchor" aria-hidden="true" id="query-account-state"></a><a href="my-first-transaction.htm#query-account-state" aria-hidden="true" class="hash-link"><svg class="hash-link-icon" aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Query Account State</h3>
<p>In this example, we will query for the state of a single account.</p>
<pre><code class="hljs css language-plaintext">libra% query account_state 0
&gt;&gt; Getting latest account state
Latest account state is:
 Account: 3ed8e5fafae4147b2a105a0be2f81972883441cfaaadf93fc0868e7a0253c4a8
 State: Some(
    AccountStateBlob {
     Raw: 0x010000002100000001217da6c6b3e19f1825cfb2676daecce3bf3de03cf26647c78df00b371b25cc9744000000200000003ed8e5fafae4147b2a105a0be2f81972883441cfaaadf93fc0868e7a0253c4a800e1f50500000000000000000000000001000000000000000100000000000000
     Decoded: Ok(
        AccountResource {
            balance: 100000000,
            sequence_number: 1,
            authentication_key: 0x3ed8e5fafae4147b2a105a0be2f81972883441cfaaadf93fc0868e7a0253c4a8,
            sent_events_count: 1,
            received_events_count: 0,
        },
    )
     },
)
 Blockchain Version: 3
</code></pre>
<h2><a class="anchor" aria-hidden="true" id="run-a-local-validator-node"></a><a href="my-first-transaction.htm#run-a-local-validator-node" aria-hidden="true" class="hash-link"><svg class="hash-link-icon" aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Run a Local Validator Node</h2>
<p>To start a validator node locally on your computer and create your own local blockchain network (not connected to the Libra testnet), ensure that you have run the build script as described in <a href="my-first-transaction.htm#setup-libra-core">Setup Libra Core</a>, change to the root directory of the Libra Core repository, and run <code>libra_swarm</code> as shown below:</p>
<pre><code class="hljs css language-bash">$ <span class="hljs-built_in">cd</span> ~/libra
$ cargo run -p libra_swarm -- -s
</code></pre>
<p><code>-p libra_swarm</code> - causes cargo to run the libra_swarm package, which starts a local blockchain consisting of one node.</p>
<p><code>-s</code> option starts a local client to connect to the local blockchain.</p>
<p>To see additional options for starting a node and connecting to the Libra Blockchain, run:</p>
<p><code>$ cargo run -p libra_swarm -- -h</code></p>
<p>The cargo run command may take some time to run. If the execution of this command completes without errors, an instance of the Libra CLI client and a Libra validator node is running on your system. Upon successful execution, you should see an output containing the CLI client menu and the <code>libra%</code> prompt.</p>
<h2><a class="anchor" aria-hidden="true" id="life-of-a-transaction"></a><a href="my-first-transaction.htm#life-of-a-transaction" aria-hidden="true" class="hash-link"><svg class="hash-link-icon" aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Life of a Transaction</h2>
<p>Once you have executed your first transaction, you may refer to the document <a href="life-of-a-transaction.htm">Life of a Transaction</a> for:</p>
<ul>
<li>A look &quot;under the hood&quot; at the lifecycle of a transaction from submission to execution.</li>
<li>An understanding of the interactions between each logical component of a Libra validator as transactions get submitted and executed in the Libra ecosystem.</li>
</ul>
<h2><a class="anchor" aria-hidden="true" id="reference"></a><a href="my-first-transaction.htm#reference" aria-hidden="true" class="hash-link"><svg class="hash-link-icon" aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Reference</h2>
<ul>
<li><a href="welcome-to-libra.htm">Welcome page</a>.</li>
<li><a href="libra-protocol.htm">Libra Protocol: Key Concepts</a> — Introduces you to the fundamental concepts of the Libra protocol.</li>
<li><a href="move-overview.htm">Getting Started With Move</a> — Introduces you to a new blockchain programming language called Move.</li>
<li><a href="life-of-a-transaction.htm">Life of a Transaction</a> — Provides a look at what happens &quot;under the hood&quot; when a transaction is submitted and executed.</li>
<li><a href="libra-core-overview.htm">Libra Core Overview</a> — Provides the concept and implementation details of the Libra Core components through READMEs.</li>
<li><a href="libra-cli.htm">CLI Guide</a> — Lists the commands (and their usage) of the Libra CLI client.</li>
<li><a href="glossary.htm">Libra Glossary</a> — Provides a quick reference to Libra terminology.</li>
</ul>
</span></div></article></div><div class="docs-prevnext"><a class="docs-prev button" href="state-machine-replication-paper.htm"><span class="arrow-prev">← </span><span>State Machine Replication in the Libra Blockchain</span></a><a class="docs-next button" href="move-overview.htm"><span>Getting Started With Move</span><span class="arrow-next"> →</span></a></div></div></div><nav class="onPageNav"><ul class="toc-headings"><li><a href="my-first-transaction.htm#assumptions">Assumptions</a></li><li><a href="my-first-transaction.htm#steps-to-submit-a-transaction">Steps to Submit a Transaction</a></li><li><a href="my-first-transaction.htm#clone-and-build-libra-core">Clone and Build Libra Core</a><ul class="toc-headings"><li><a href="my-first-transaction.htm#clone-the-libra-core-repository">Clone the Libra Core Repository</a></li><li><a href="my-first-transaction.htm#checkout-the-testnet-branch">Checkout the testnet Branch</a></li><li><a href="my-first-transaction.htm#install-dependencies">Install Dependencies</a></li></ul></li><li><a href="my-first-transaction.htm#build-libra-cli-client-and-connect-to-the-testnet">Build Libra CLI Client and Connect to the Testnet</a></li><li><a href="my-first-transaction.htm#create-alices-and-bobs-account">Create Alice’s and Bob’s Account</a><ul class="toc-headings"><li><a href="my-first-transaction.htm#step-1-check-if-the-cli-client-is-running-on-your-system">Step 1: Check If the CLI Client Is Running on Your System</a></li><li><a href="my-first-transaction.htm#step-2-create-alices-account">Step 2: Create Alice’s Account</a></li><li><a href="my-first-transaction.htm#step-3-create-bobs-account">Step 3: Create Bob’s Account</a></li><li><a href="my-first-transaction.htm#step-4-optional-list-accounts">Step 4 (Optional): List Accounts</a></li></ul></li><li><a href="my-first-transaction.htm#add-libra-coins-to-alices-and-bobs-accounts">Add Libra Coins to Alice’s and Bob’s Accounts</a><ul class="toc-headings"><li><a href="my-first-transaction.htm#step-1-add-110-lbr-to-alices-account">Step 1: Add 110 LBR to Alice’s Account</a></li><li><a href="my-first-transaction.htm#step-2-add-52-lbr-to-bobs-account">Step 2: Add 52 LBR to Bob’s Account</a></li><li><a href="my-first-transaction.htm#step-3-check-the-balance">Step 3: Check the Balance</a></li></ul></li><li><a href="my-first-transaction.htm#submit-a-transaction">Submit a Transaction</a><ul class="toc-headings"><li><a href="my-first-transaction.htm#query-the-accounts-sequence-numbers">Query the Accounts’ Sequence Numbers</a></li><li><a href="my-first-transaction.htm#transfer-money">Transfer Money</a></li><li><a href="my-first-transaction.htm#query-sequence-number-after-transfer">Query Sequence Number After Transfer</a></li><li><a href="my-first-transaction.htm#check-the-balance-in-both-accounts-after-transfer">Check the Balance in Both Accounts After Transfer</a></li><li><a href="my-first-transaction.htm#congratulations">Congratulations!</a></li></ul></li><li><a href="my-first-transaction.htm#troubleshooting">Troubleshooting</a><ul class="toc-headings"><li><a href="my-first-transaction.htm#setup">Setup</a></li><li><a href="my-first-transaction.htm#client-build-and-run">Client Build and Run</a></li><li><a href="my-first-transaction.htm#minting-and-adding-money-to-account">Minting and Adding Money to Account</a></li><li><a href="my-first-transaction.htm#the-transfer-command">The Transfer Command</a></li></ul></li><li><a href="my-first-transaction.htm#sample-outputs-of-additional-query-commands">Sample Outputs of Additional Query Commands</a><ul class="toc-headings"><li><a href="my-first-transaction.htm#query-transaction-by-account-and-sequence-number">Query Transaction by Account and Sequence Number</a></li><li><a href="my-first-transaction.htm#query-events">Query Events</a></li><li><a href="my-first-transaction.htm#query-account-state">Query Account State</a></li></ul></li><li><a href="my-first-transaction.htm#run-a-local-validator-node">Run a Local Validator Node</a></li><li><a href="my-first-transaction.htm#life-of-a-transaction">Life of a Transaction</a></li><li><a href="my-first-transaction.htm#reference">Reference</a></li></ul></nav></div>    <footer class="nav-footer" id="footer">
      <section class="sitemap"><a href="https://developers.libra.org/" class="nav-home"><img
            src="libra-logomark-white.png" alt="Libra" /></a>
        <div class="footerSection">
          <h5>Learn About Libra</h5><a href="welcome-to-libra.htm">Welcome to Libra</a><a
            href="libra-protocol.htm">Libra Protocol</a><a href="the-libra-blockchain-paper.htm">Libra Blockchain</a><a
            href="life-of-a-transaction.htm">Life of a Transaction</a>
          <p></p>
          <h5>Try Libra Core </h5><a href="my-first-transaction.htm">My First Transaction</a><a
            href="move-overview.htm">Getting Started With Move</a>
        </div>
        <div class="footerSection">
          <h5>Policies</h5><a href="privacy-policy.htm">Privacy Policy</a><a href="terms-of-use.htm">Terms of Use</a><a
            href="cookies-policy.htm">Cookies Policy</a><a href="code-of-conduct.htm">Code of Conduct</a>
          <p></p>
          <h5>Community</h5><a href="https://community.libra.org/">Developer Forum</a><a
            href="https://developers.libra.org/newsletter_form">Newsletter</a>
        </div>
        <div class="footerSection">
          <h5>Libra Developer Community</h5>
          <img style="width:300px" src='qr_violas.png'>
          <h5>Join us with scan and enter libra<h5>
        </div>
      </section>
      <section class="copyright"> © Violas Association</section>
    </footer></div><script type="text/javascript" src="https://cdn.jsdelivr.net/docsearch.js/1/docsearch.min.js"></script><script>
                document.addEventListener('keyup', function(e) {
                  if (e.target !== document.body) {
                    return;
                  }
                  // keyCode for '/' (slash)
                  if (e.keyCode === 191) {
                    const search = document.getElementById('search_input_react');
                    search && search.focus();
                  }
                });
              </script><script>
              var search = docsearch({
                
                apiKey: '0d48ee629d39ddc4916eeef7755a0c4c',
                indexName: 'libra',
                inputSelector: '#search_input_react'
              });
            </script></body></html>