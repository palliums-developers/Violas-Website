<!DOCTYPE html>
<html lang="en">

<head>
  <meta charSet="utf-8" />
  <meta http-equiv="X-UA-Compatible" content="IE=edge" />
  <title>Consensus · Libra</title>
  <meta name="viewport" content="width=device-width" />
  <meta name="generator" content="Docusaurus" />
  <meta name="description"
    content="The consensus component supports state machine replication using the LibraBFT consensus protocol." />
  <meta name="docsearch:language" content="en" />
  <meta property="og:title" content="Consensus · Libra" />
  <meta property="og:type" content="website" />
  <meta property="og:url" content="https://developers.libra.org/" />
  <meta property="og:description"
    content="The consensus component supports state machine replication using the LibraBFT consensus protocol." />
  <meta property="og:image" content="https://developers.libra.org/img/libra.png" />
  <meta name="twitter:card" content="summary" />
  <meta name="twitter:image" content="https://developers.libra.org/img/libra.png" />
  <link rel="shortcut icon" href="libra.ico" />
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/docsearch.js/1/docsearch.min.css" />
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/9.12.0/styles/default.min.css" />
  <link rel="alternate" type="application/atom+xml" href="atom.xml" title="Libra Blog ATOM Feed" />
  <link rel="alternate" type="application/rss+xml" href="feed.xml" title="Libra Blog RSS Feed" />
  <script type="text/javascript" src="buttons.js"></script>
  <script type="text/javascript" src="code_block_buttons.js"></script>
  <script type="text/javascript" src="cookie_banner.js"></script>
  <script type="text/javascript" src="disable_adblock.js"></script>
  <script type="text/javascript" src="segment.analytics.min.js"></script>
  <script type="text/javascript" src="segment.js"></script>
  <script type="text/javascript" src="clipboardjs.2.0.0.min.js"></script>
  <script type="text/javascript" src="forms.js"></script>
  <script src="scrollSpy.js"></script>
  <link rel="stylesheet" href="main.css" />
  <script src="codetabs.js"></script>
</head>

<body class="sideNavVisible separateOnPageNav">
  <div class="fixedHeaderContainer">
    <div class="headerWrapper wrapper">
      <header><a href="https://developers.libra.org/"><img class="logo" src="libra-nav-logo.png" alt="Libra" />
          <h2 class="headerTitleWithLogo">Libra</h2>
        </a>
        <div class="navigationWrapper navigationSlider">
          <nav class="slidingNav">
            <ul class="nav-site nav-site-internal">
              <li class=""><a href="https://violas.io/">Home</a></li>
              <li class="siteNavGroupActive"><a href="welcome-to-libra.htm" target="_self">Documentation</a></li>
              <li class=""><a href="https://community.libra.org" target="_self">libra Community</a></li>
              <li class=""><a href="blog_2.html" target="_self">libra Blog</a></li>
              <li class=""><a href="https://libra.org" target="_self">libra.org</a></li>
              <li class=""><a href="https://github.com/libra/libra" target="_self">libra GitHub</a></li>
              <li class=""><a href="../lib_doc_en2cn/consensus.htm" target="_self">中/EN</a></li>
              <li class="navSearchWrapper reactNavSearchWrapper"><input type="text" id="search_input_react"
                  placeholder="Search" title="Search" /></li>
            </ul>
          </nav>
        </div>
      </header>
    </div>
  </div>
  <div class="navPusher">
    <div class="docMainWrapper wrapper">
      <div class="docsNavContainer" id="docsNav">
        <nav class="toc">
          <div class="toggleNav">
            <section class="navWrapper wrapper">
              <div class="navBreadcrumb wrapper">
                <div class="navToggle" id="navToggler">
                  <div class="hamburger-menu">
                    <div class="line1"></div>
                    <div class="line2"></div>
                    <div class="line3"></div>
                  </div>
                </div>
                <h2><i>›</i><span>READMEs</span></h2>
                <div class="tocToggler" id="tocToggler"><i class="icon-toc"></i></div>
              </div>
              <div class="navGroups">
                <div class="navGroup">
                  <h3 class="navGroupCategoryTitle">Learn About Libra</h3>
                  <ul class="">
                    <li class="navListItem"><a class="navItem" href="welcome-to-libra.htm">Welcome</a></li>
                    <li class="navListItem"><a class="navItem" href="libra-protocol.htm">Libra Protocol: Key
                        Concepts</a></li>
                    <li class="navListItem"><a class="navItem" href="life-of-a-transaction.htm">Life of a
                        Transaction</a></li>
                    <div class="navGroup subNavGroup">
                      <h4 class="navGroupSubcategoryTitle">Technical Papers</h4>
                      <ul>
                        <li class="navListItem"><a class="navItem" href="the-libra-blockchain-paper.htm">The Libra
                            Blockchain</a></li>
                        <li class="navListItem"><a class="navItem" href="move-paper.htm">Move: A Language With
                            Programmable Resources</a></li>
                        <li class="navListItem"><a class="navItem" href="state-machine-replication-paper.htm">State
                            Machine Replication in the Libra Blockchain</a></li>
                      </ul>
                    </div>
                  </ul>
                </div>
                <div class="navGroup">
                  <h3 class="navGroupCategoryTitle">Try Libra Core</h3>
                  <ul class="">
                    <li class="navListItem"><a class="navItem" href="my-first-transaction.htm">My First Transaction</a>
                    </li>
                    <li class="navListItem"><a class="navItem" href="move-overview.htm">Getting Started With Move</a>
                    </li>
                    <li class="navListItem"><a class="navItem" href="run-local-network.htm">Run a Local Network</a></li>
                    <li class="navListItem"><a class="navItem" href="run-move-locally.htm">Run Move Programs Locally</a>
                    </li>
                  </ul>
                </div>
                <div class="navGroup">
                  <h3 class="navGroupCategoryTitle">Community</h3>
                  <ul class="">
                    <li class="navListItem"><a class="navItem" href="libra-open-source-paper.htm">Libra Open Source</a>
                    </li>
                    <li class="navListItem"><a class="navItem" href="contributing.htm">Contribution Guide</a></li>
                    <li class="navListItem"><a class="navItem" href="coding-guidelines.htm">Coding Guidelines</a></li>
                    <li class="navListItem"><a class="navItem" href="security.htm">Reporting Vulnerabilities</a></li>
                  </ul>
                </div>
                <div class="navGroup">
                  <h3 class="navGroupCategoryTitle">Libra Codebase</h3>
                  <ul class="">
                    <li class="navListItem"><a class="navItem" href="libra-core-overview.htm">Libra Core Overview</a>
                    </li>
                    <div class="navGroup subNavGroup">
                      <h4 class="navGroupSubcategoryTitle">READMEs</h4>
                      <ul>
                        <li class="navListItem"><a class="navItem" href="admission-control.htm">Admission Control</a>
                        </li>
                        <li class="navListItem"><a class="navItem" href="bytecode-verifier.htm">Bytecode Verifier</a>
                        </li>
                        <li class="navListItem navListItemActive"><a class="navItem" href="consensus.htm">Consensus</a>
                        </li>
                        <li class="navListItem"><a class="navItem" href="crypto.htm">Crypto</a></li>
                        <li class="navListItem"><a class="navItem" href="execution.htm">Execution</a></li>
                        <li class="navListItem"><a class="navItem" href="mempool.htm">Mempool</a></li>
                        <li class="navListItem"><a class="navItem" href="ir-to-bytecode.htm">Move IR Compiler</a></li>
                        <li class="navListItem"><a class="navItem" href="move-language.htm">Move Language</a></li>
                        <li class="navListItem"><a class="navItem" href="network.htm">Network</a></li>
                        <li class="navListItem"><a class="navItem" href="storage.htm">Storage</a></li>
                        <li class="navListItem"><a class="navItem" href="vm.htm">Virtual Machine</a></li>
                      </ul>
                    </div>
                  </ul>
                </div>
                <div class="navGroup">
                  <h3 class="navGroupCategoryTitle">Reference</h3>
                  <ul class="">
                    <li class="navListItem"><a class="navItem" href="libra-cli.htm">Libra CLI</a></li>
                    <li class="navListItem"><a class="navItem" href="glossary.htm">Glossary</a></li>
                  </ul>
                </div>
              </div>
            </section>
          </div>
          <script>
            var coll = document.getElementsByClassName('collapsible');
            var checkActiveCategory = true;
            for (var i = 0; i < coll.length; i++) {
              var links = coll[i].nextElementSibling.getElementsByTagName('*');
              if (checkActiveCategory) {
                for (var j = 0; j < links.length; j++) {
                  if (links[j].classList.contains('navListItemActive')) {
                    coll[i].nextElementSibling.classList.toggle('hide');
                    coll[i].childNodes[1].classList.toggle('rotate');
                    checkActiveCategory = false;
                    break;
                  }
                }
              }

              coll[i].addEventListener('click', function () {
                var arrow = this.childNodes[1];
                arrow.classList.toggle('rotate');
                var content = this.nextElementSibling;
                content.classList.toggle('hide');
              });
            }

            document.addEventListener('DOMContentLoaded', function () {
              createToggler('#navToggler', '#docsNav', 'docsSliderActive');
              createToggler('#tocToggler', 'body', 'tocActive');

              var headings = document.querySelector('.toc-headings');
              headings && headings.addEventListener('click', function (event) {
                var el = event.target;
                while (el !== headings) {
                  if (el.tagName === 'A') {
                    document.body.classList.remove('tocActive');
                    break;
                  } else {
                    el = el.parentNode;
                  }
                }
              }, false);

              function createToggler(togglerSelector, targetSelector, className) {
                var toggler = document.querySelector(togglerSelector);
                var target = document.querySelector(targetSelector);

                if (!toggler) {
                  return;
                }

                toggler.onclick = function (event) {
                  event.preventDefault();

                  target.classList.toggle(className);
                };
              }
            });
          </script>
        </nav>
      </div>
      <div class="container mainContainer">
        <div class="wrapper">
          <div class="post">
            <header class="postHeader"><a class="edit-page-link button"
                href="https://github.com/libra/libra/edit/master/consensus/README.md" target="_blank"
                rel="noreferrer noopener">Edit</a>
              <h1 class="postHeaderTitle">Consensus</h1>
            </header>
            <article>
              <div><span>
                  <p>The consensus component supports state machine replication using the LibraBFT consensus protocol.
                  </p>
                  <h2><a class="anchor" aria-hidden="true" id="overview"></a><a href="consensus.htm#overview"
                      aria-hidden="true" class="hash-link"><svg class="hash-link-icon" aria-hidden="true" height="16"
                        version="1.1" viewBox="0 0 16 16" width="16">
                        <path fill-rule="evenodd"
                          d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
                        </path>
                      </svg></a>Overview</h2>
                  <p>A consensus protocol allows a set of validators to create the logical appearance of a single
                    database. The consensus protocol replicates submitted transactions among the validators, executes
                    potential transactions against the current database, and then agrees on a binding commitment to the
                    ordering of transactions and resulting execution. As a result, all validators can maintain an
                    identical database for a given version number following the <a
                      href="https://dl.acm.org/citation.cfm?id=98167">state machine replication paradigm</a>. The Libra
                    protocol uses a variant of the <a href="https://arxiv.org/pdf/1803.05069.pdf">HotStuff consensus
                      protocol</a>, a recent Byzantine fault-tolerant (<a
                      href="https://en.wikipedia.org/wiki/Byzantine_fault">BFT</a>) consensus protocol, called LibraBFT.
                    It provides safety (all honest validators agree on commits and execution) and liveness (commits are
                    continually produced) in the partial synchrony model defined in the paper &quot;Consensus in the
                    Presence of Partial Synchrony&quot; by Dwork, Lynch, and Stockmeyer (<a
                      href="https://groups.csail.mit.edu/tds/papers/Lynch/jacm88.pdf">DLS</a>) and mentioned in the
                    paper <a href="http://pmg.csail.mit.edu/papers/osdi99.pdf">&quot;Practical Byzantine Fault
                      Tolerance&quot; (PBFT)</a> by Castro and Liskov, as well as newer protocols such as <a
                      href="https://arxiv.org/abs/1807.04938">Tendermint</a>. In this document, we present a high-level
                    description of the LibraBFT protocol and discuss how the code is organized. Refer to the <a
                      href="the-libra-blockchain-paper.htm">Libra Blockchain Paper</a> to learn more about how LibraBFT
                    fits into the Libra protocol. For details on the specifications and proofs of LibraBFT, read the
                    full <a href="state-machine-replication-paper.htm">technical report</a>.</p>
                  <p>Agreement on the database state must be reached between validators, even if
                    there are Byzantine faults. The Byzantine failures model allows some validators
                    to arbitrarily deviate from the protocol without constraint, with the exception
                    of being computationally bound (and thus not able to break cryptographic assumptions). Byzantine
                    faults are worst-case errors where validators collude and behave maliciously to try to sabotage
                    system behavior. A consensus protocol that tolerates Byzantine faults caused by malicious or hacked
                    validators can also mitigate arbitrary hardware and software failures.</p>
                  <p>LibraBFT assumes that a set of 3f + 1 votes is distributed among a set of validators that may be
                    honest or Byzantine. LibraBFT remains safe, preventing attacks such as double spends and forks when
                    at most f votes are controlled by Byzantine validators — also implying that at least 2f+1 votes are
                    honest. LibraBFT remains live, committing transactions from clients, as long as there exists a
                    global stabilization time (GST), after which all messages between honest validators are delivered to
                    other honest validators within a maximal network delay <span class="katex"><span
                        class="katex-mathml"><math>
                          <semantics>
                            <mrow>
                              <mi mathvariant="normal">Δ</mi>
                            </mrow>
                            <annotation encoding="application/x-tex">\Delta</annotation>
                          </semantics>
                        </math></span><span class="katex-html" aria-hidden="true"><span class="strut"
                          style="height:0.68333em;"></span><span class="strut bottom"
                          style="height:0.68333em;vertical-align:0em;"></span><span
                          class="base textstyle uncramped"><span class="mord mathrm">Δ</span></span></span></span> (this
                    is the partial synchrony model introduced in <a
                      href="https://groups.csail.mit.edu/tds/papers/Lynch/jacm88.pdf">DLS</a>). In addition to
                    traditional guarantees, LibraBFT maintains safety when validators crash and restart — even if all
                    validators restart at the same time.</p>
                  <h3><a class="anchor" aria-hidden="true" id="librabft-overview"></a><a
                      href="consensus.htm#librabft-overview" aria-hidden="true" class="hash-link"><svg
                        class="hash-link-icon" aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16"
                        width="16">
                        <path fill-rule="evenodd"
                          d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
                        </path>
                      </svg></a>LibraBFT Overview</h3>
                  <p>In LibraBFT, validators receive transactions from clients and share them with each other through a
                    shared mempool protocol. The LibraBFT protocol then proceeds in a sequence of rounds. In each round,
                    a validator takes the role of leader and proposes a block of transactions to extend a certified
                    sequence of blocks (see quorum certificates below) that contain the full previous transaction
                    history. A validator receives the proposed block and checks their voting rules to determine if it
                    should vote for certifying this block. These simple rules ensure the safety of LibraBFT — and their
                    implementation can be cleanly separated and audited. If the validator intends to vote for this
                    block, it executes the block’s transactions speculatively and without external effect. This results
                    in the computation of an authenticator for the database that results from the execution of the
                    block. The validator then sends a signed vote for the block and the database authenticator to the
                    leader. The leader gathers these votes to form a quorum certificate that provides evidence of <span
                      class="katex"><span class="katex-mathml"><math>
                          <semantics>
                            <mrow>
                              <mo>≥</mo>
                            </mrow>
                            <annotation encoding="application/x-tex">\ge</annotation>
                          </semantics>
                        </math></span><span class="katex-html" aria-hidden="true"><span class="strut"
                          style="height:0.63597em;"></span><span class="strut bottom"
                          style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span
                          class="base textstyle uncramped"><span class="mrel">≥</span></span></span></span> 2f + 1 votes
                    for this block and broadcasts the quorum certificate to all validators.</p>
                  <p>A block is committed when a contiguous 3-chain commit rule is met. A block at round k is committed
                    if it has a quorum certificate and is confirmed by two more blocks and quorum certificates at rounds
                    k + 1 and k + 2. The commit rule eventually allows honest validators to commit a block. LibraBFT
                    guarantees that all honest validators will eventually commit the block (and proceeding sequence of
                    blocks linked from it). Once a sequence of blocks has committed, the state resulting from executing
                    their transactions can be persisted and forms a replicated database.</p>
                  <h3><a class="anchor" aria-hidden="true" id="advantages-of-the-hotstuff-paradigm"></a><a
                      href="consensus.htm#advantages-of-the-hotstuff-paradigm" aria-hidden="true" class="hash-link"><svg
                        class="hash-link-icon" aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16"
                        width="16">
                        <path fill-rule="evenodd"
                          d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
                        </path>
                      </svg></a>Advantages of the HotStuff Paradigm</h3>
                  <p>We evaluated several BFT-based protocols against the dimensions of performance, reliability,
                    security, ease of robust implementation, and operational overhead for validators. Our goal was to
                    choose a protocol that would initially support at least 100 validators and would be able to evolve
                    over time to support 500–1,000 validators. We had three reasons for selecting the HotStuff protocol
                    as the basis for LibraBFT: (i) simplicity and modularity; (ii) ability to easily integrate consensus
                    with execution; and (iii) promising performance in early experiments.</p>
                  <p>The HotStuff protocol decomposes into modules for safety (voting and commit rules) and liveness
                    (pacemaker). This decoupling provides the ability to develop and experiment independently and on
                    different modules in parallel. Due to the simple voting and commit rules, protocol safety is easy to
                    implement and verify. It is straightforward to integrate execution as a part of consensus to avoid
                    forking issues that arise from non-deterministic execution in a leader-based protocol. Finally, our
                    early prototypes confirmed high throughput and low transaction latency as independently measured in
                    <a
                      href="https://developers.libra.org/docs/crates/(https:/arxiv.org/pdf/1803.05069.pdf)">HotStuff</a>.
                    We did not consider proof-of-work based protocols, such as <a
                      href="https://bitcoin.org/bitcoin.pdf">Bitcoin</a>, due to their poor performance
                    and high energy (and environmental) costs.</p>
                  <h3><a class="anchor" aria-hidden="true" id="hotstuff-extensions-and-modifications"></a><a
                      href="consensus.htm#hotstuff-extensions-and-modifications" aria-hidden="true"
                      class="hash-link"><svg class="hash-link-icon" aria-hidden="true" height="16" version="1.1"
                        viewBox="0 0 16 16" width="16">
                        <path fill-rule="evenodd"
                          d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
                        </path>
                      </svg></a>HotStuff Extensions and Modifications</h3>
                  <p>In LibraBFT, to better support the goals of the Libra ecosystem, we extend and adapt the core
                    HotStuff protocol and implementation in several ways. Importantly, we reformulate the safety
                    conditions and provide extended proofs of safety, liveness, and optimistic responsiveness. We also
                    implement a number of additional features. First, we make the protocol more resistant to
                    non-determinism bugs, by having validators collectively sign the resulting state of a block rather
                    than just the sequence of transactions. This also allows clients to use quorum certificates to
                    authenticate reads from the database. Second, we design a pacemaker that emits explicit timeouts,
                    and validators rely on a quorum of those to move to the next round — without requiring synchronized
                    clocks. Third, we intend to design an unpredictable leader election mechanism in which the leader of
                    a round is determined by the proposer of the latest committed block using a verifiable random
                    function <a
                      href="https://people.csail.mit.edu/silvio/Selected%20Scientific%20Papers/Pseudo%20Randomness/Verifiable_Random_Functions.pdf">VRF</a>.
                    This mechanism limits the window of time in which an adversary can launch an effective
                    denial-of-service attack against a leader. Fourth, we use aggregate signatures that preserve the
                    identity of validators who sign quorum certificates. This allows us to provide incentives to
                    validators that contribute to quorum certificates. Aggregate signatures also do not require a
                    complex <a href="https://www.cypherpunks.ca/~iang/pubs/DKG.pdf">threshold key setup</a>.</p>
                  <h2><a class="anchor" aria-hidden="true" id="implementation-details"></a><a
                      href="consensus.htm#implementation-details" aria-hidden="true" class="hash-link"><svg
                        class="hash-link-icon" aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16"
                        width="16">
                        <path fill-rule="evenodd"
                          d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
                        </path>
                      </svg></a>Implementation Details</h2>
                  <p>The consensus component is mostly implemented in the <a
                      href="https://en.wikipedia.org/wiki/Actor_model">Actor</a> programming model — i.e., it uses
                    message-passing to communicate between different subcomponents with the <a
                      href="https://tokio.rs/">tokio</a> framework used as the task runtime. The primary exception to
                    the actor model (as it is accessed in parallel by several subcomponents) is the consensus data
                    structure <em>BlockStore</em> which manages the blocks, execution, quorum certificates, and other
                    shared data structures. The major subcomponents in the consensus component are:</p>
                  <ul>
                    <li><strong>TxnManager</strong> is the interface to the mempool component and supports the pulling
                      of transactions as well as removing committed transactions. A proposer uses on-demand pull
                      transactions from mempool to form a proposal block.</li>
                    <li><strong>StateComputer</strong> is the interface for accessing the execution component. It can
                      execute blocks, commit blocks, and can synchronize state.</li>
                    <li><strong>BlockStore</strong> maintains the tree of proposal blocks, block execution, votes,
                      quorum certificates, and persistent storage. It is responsible for maintaining the consistency of
                      the combination of these data structures and can be concurrently accessed by other subcomponents.
                    </li>
                    <li><strong>EventProcessor</strong> is responsible for processing the individual events (e.g.,
                      process_new_round, process_proposal, process_vote). It exposes the async processing functions for
                      each event type and drives the protocol.</li>
                    <li><strong>Pacemaker</strong> is responsible for the liveness of the consensus protocol. It changes
                      rounds due to timeout certificates or quorum certificates and proposes blocks when it is the
                      proposer for the current round.</li>
                    <li><strong>SafetyRules</strong> is responsible for the safety of the consensus protocol. It
                      processes quorum certificates and LedgerInfo to learn about new commits and guarantees that the
                      two voting rules are followed — even in the case of restart (since all safety data is persisted to
                      local storage).</li>
                  </ul>
                  <p>All consensus messages are signed by their creators and verified by their receivers. Message
                    verification occurs closest to the network layer to avoid invalid or unnecessary data from entering
                    the consensus protocol.</p>
                  <h2><a class="anchor" aria-hidden="true" id="how-is-this-module-organized"></a><a
                      href="consensus.htm#how-is-this-module-organized" aria-hidden="true" class="hash-link"><svg
                        class="hash-link-icon" aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16"
                        width="16">
                        <path fill-rule="evenodd"
                          d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
                        </path>
                      </svg></a>How is this module organized?</h2>
                  <pre><code class="hljs">consensus
├── src
│   └── chained_bft                # Implementation of the LibraBFT protocol
│       ├── block_storage          # In-memory storage of blocks and related data structures
│       ├── consensus_types        # Consensus data types (i.e. quorum certificates)
│       ├── consensusdb            # Database interaction to persist consensus data for safety and liveness
│       ├── liveness               # Pacemaker, proposer, and other liveness related code
│       ├── safety                 # Safety (voting) rules
│       └── test_utils             # Mock implementations that are used for testing only
└── state_synchronizer             # Synchronization between validators to catch up on committed state
</code></pre>
                </span></div>
            </article>
          </div>
          <div class="docs-prevnext"><a class="docs-prev button" href="bytecode-verifier.htm"><span class="arrow-prev">←
              </span><span>Bytecode Verifier</span></a><a class="docs-next button"
              href="crypto.htm"><span>Crypto</span><span class="arrow-next"> →</span></a></div>
        </div>
      </div>
      <nav class="onPageNav">
        <ul class="toc-headings">
          <li><a href="consensus.htm#overview">Overview</a>
            <ul class="toc-headings">
              <li><a href="consensus.htm#librabft-overview">LibraBFT Overview</a></li>
              <li><a href="consensus.htm#advantages-of-the-hotstuff-paradigm">Advantages of the HotStuff Paradigm</a>
              </li>
              <li><a href="consensus.htm#hotstuff-extensions-and-modifications">HotStuff Extensions and
                  Modifications</a></li>
            </ul>
          </li>
          <li><a href="consensus.htm#implementation-details">Implementation Details</a></li>
          <li><a href="consensus.htm#how-is-this-module-organized">How is this module organized?</a></li>
        </ul>
      </nav>
    </div>
    <footer class="nav-footer" id="footer">
        <section class="sitemap"><a href="https://developers.libra.org/" class="nav-home"><img
              src="libra-logomark-white.png" alt="Libra" /></a>
          <div class="footerSection">
            <h5>Learn About Libra</h5><a href="welcome-to-libra.htm">Welcome to Libra</a><a
              href="libra-protocol.htm">Libra Protocol</a><a href="the-libra-blockchain-paper.htm">Libra Blockchain</a><a
              href="life-of-a-transaction.htm">Life of a Transaction</a>
            <p></p>
            <h5>Try Libra Core </h5><a href="my-first-transaction.htm">My First Transaction</a><a
              href="move-overview.htm">Getting Started With Move</a>
          </div>
          <div class="footerSection">
            <h5>Policies</h5><a href="privacy-policy.htm">Privacy Policy</a><a href="terms-of-use.htm">Terms of Use</a><a
              href="cookies-policy.htm">Cookies Policy</a><a href="code-of-conduct.htm">Code of Conduct</a>
            <p></p>
            <h5>Community</h5><a href="https://community.libra.org/">Developer Forum</a><a
              href="https://developers.libra.org/newsletter_form">Newsletter</a>
          </div>
          <div class="footerSection">
            <h5>Libra Developer Community</h5>
            <img style="width:300px" src='qr_violas.png'>
            <h5>Join us with scan and enter libra<h5>
          </div>
        </section>
        <section class="copyright"> © Violas Association</section>
      </footer>
  </div>
  <script type="text/javascript" src="https://cdn.jsdelivr.net/docsearch.js/1/docsearch.min.js"></script>
  <script>
    document.addEventListener('keyup', function (e) {
      if (e.target !== document.body) {
        return;
      }
      // keyCode for '/' (slash)
      if (e.keyCode === 191) {
        const search = document.getElementById('search_input_react');
        search && search.focus();
      }
    });
  </script>
  <script>
    var search = docsearch({

      apiKey: '0d48ee629d39ddc4916eeef7755a0c4c',
      indexName: 'libra',
      inputSelector: '#search_input_react'
    });
  </script>
</body>

</html>