<!DOCTYPE html>
<html lang="en">

<head>
  <meta charSet="utf-8" />
  <meta http-equiv="X-UA-Compatible" content="IE=edge" />
  <title>Network · Libra</title>
  <meta name="viewport" content="width=device-width" />
  <meta name="generator" content="Docusaurus" />
  <meta name="description" content="The network component provides peer-to-peer communication primitives to other" />
  <meta name="docsearch:language" content="en" />
  <meta property="og:title" content="Network · Libra" />
  <meta property="og:type" content="website" />
  <meta property="og:url" content="https://developers.libra.org/" />
  <meta property="og:description"
    content="The network component provides peer-to-peer communication primitives to other" />
  <meta property="og:image" content="https://developers.libra.org/img/libra.png" />
  <meta name="twitter:card" content="summary" />
  <meta name="twitter:image" content="https://developers.libra.org/img/libra.png" />
  <link rel="shortcut icon" href="libra.ico" />
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/docsearch.js/1/docsearch.min.css" />
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/9.12.0/styles/default.min.css" />
  <link rel="alternate" type="application/atom+xml" href="atom.xml" title="Libra Blog ATOM Feed" />
  <link rel="alternate" type="application/rss+xml" href="feed.xml" title="Libra Blog RSS Feed" />
  <script type="text/javascript" src="buttons.js"></script>
  <script type="text/javascript" src="code_block_buttons.js"></script>
  <script type="text/javascript" src="cookie_banner.js"></script>
  <script type="text/javascript" src="disable_adblock.js"></script>
  <script type="text/javascript" src="segment.analytics.min.js"></script>
  <script type="text/javascript" src="segment.js"></script>
  <script type="text/javascript" src="clipboardjs.2.0.0.min.js"></script>
  <script type="text/javascript" src="forms.js"></script>
  <script src="scrollSpy.js"></script>
  <link rel="stylesheet" href="main.css" />
  <script src="codetabs.js"></script>
</head>

<body class="sideNavVisible separateOnPageNav">
  <div class="fixedHeaderContainer">
    <div class="headerWrapper wrapper">
      <header><a href="https://developers.libra.org/"><img class="logo" src="libra-nav-logo.png" alt="Libra" />
          <h2 class="headerTitleWithLogo">Libra</h2>
        </a>
        <div class="navigationWrapper navigationSlider">
          <nav class="slidingNav">
            <ul class="nav-site nav-site-internal">
              <li class=""><a href="https://violas.io/">Home</a></li>
              <li class="siteNavGroupActive"><a href="welcome-to-libra.htm" target="_self">Documentation</a></li>
              <li class=""><a href="https://community.libra.org" target="_self">Community</a></li>
              <li class=""><a href="blog_2.html" target="_self">Blog</a></li>
              <li class=""><a href="https://libra.org" target="_self">libra.org</a></li>
              <li class=""><a href="https://github.com/libra/libra" target="_self">GitHub</a></li>
              <li class=""><a href="../lib_doc_en2cn/network.htm" target="_self">中/EN</a></li>
              <li class="navSearchWrapper reactNavSearchWrapper"><input type="text" id="search_input_react"
                  placeholder="Search" title="Search" /></li>
            </ul>
          </nav>
        </div>
      </header>
    </div>
  </div>
  <div class="navPusher">
    <div class="docMainWrapper wrapper">
      <div class="docsNavContainer" id="docsNav">
        <nav class="toc">
          <div class="toggleNav">
            <section class="navWrapper wrapper">
              <div class="navBreadcrumb wrapper">
                <div class="navToggle" id="navToggler">
                  <div class="hamburger-menu">
                    <div class="line1"></div>
                    <div class="line2"></div>
                    <div class="line3"></div>
                  </div>
                </div>
                <h2><i>›</i><span>READMEs</span></h2>
                <div class="tocToggler" id="tocToggler"><i class="icon-toc"></i></div>
              </div>
              <div class="navGroups">
                <div class="navGroup">
                  <h3 class="navGroupCategoryTitle">Learn About Libra</h3>
                  <ul class="">
                    <li class="navListItem"><a class="navItem" href="welcome-to-libra.htm">Welcome</a></li>
                    <li class="navListItem"><a class="navItem" href="libra-protocol.htm">Libra Protocol: Key
                        Concepts</a></li>
                    <li class="navListItem"><a class="navItem" href="life-of-a-transaction.htm">Life of a
                        Transaction</a></li>
                    <div class="navGroup subNavGroup">
                      <h4 class="navGroupSubcategoryTitle">Technical Papers</h4>
                      <ul>
                        <li class="navListItem"><a class="navItem" href="the-libra-blockchain-paper.htm">The Libra
                            Blockchain</a></li>
                        <li class="navListItem"><a class="navItem" href="move-paper.htm">Move: A Language With
                            Programmable Resources</a></li>
                        <li class="navListItem"><a class="navItem" href="state-machine-replication-paper.htm">State
                            Machine Replication in the Libra Blockchain</a></li>
                      </ul>
                    </div>
                  </ul>
                </div>
                <div class="navGroup">
                  <h3 class="navGroupCategoryTitle">Try Libra Core</h3>
                  <ul class="">
                    <li class="navListItem"><a class="navItem" href="my-first-transaction.htm">My First Transaction</a>
                    </li>
                    <li class="navListItem"><a class="navItem" href="move-overview.htm">Getting Started With Move</a>
                    </li>
                    <li class="navListItem"><a class="navItem" href="run-local-network.htm">Run a Local Network</a></li>
                    <li class="navListItem"><a class="navItem" href="run-move-locally.htm">Run Move Programs Locally</a>
                    </li>
                  </ul>
                </div>
                <div class="navGroup">
                  <h3 class="navGroupCategoryTitle">Community</h3>
                  <ul class="">
                    <li class="navListItem"><a class="navItem" href="libra-open-source-paper.htm">Libra Open Source</a>
                    </li>
                    <li class="navListItem"><a class="navItem" href="contributing.htm">Contribution Guide</a></li>
                    <li class="navListItem"><a class="navItem" href="coding-guidelines.htm">Coding Guidelines</a></li>
                    <li class="navListItem"><a class="navItem" href="security.htm">Reporting Vulnerabilities</a></li>
                  </ul>
                </div>
                <div class="navGroup">
                  <h3 class="navGroupCategoryTitle">Libra Codebase</h3>
                  <ul class="">
                    <li class="navListItem"><a class="navItem" href="libra-core-overview.htm">Libra Core Overview</a>
                    </li>
                    <div class="navGroup subNavGroup">
                      <h4 class="navGroupSubcategoryTitle">READMEs</h4>
                      <ul>
                        <li class="navListItem"><a class="navItem" href="admission-control.htm">Admission Control</a>
                        </li>
                        <li class="navListItem"><a class="navItem" href="bytecode-verifier.htm">Bytecode Verifier</a>
                        </li>
                        <li class="navListItem"><a class="navItem" href="consensus.htm">Consensus</a></li>
                        <li class="navListItem"><a class="navItem" href="crypto.htm">Crypto</a></li>
                        <li class="navListItem"><a class="navItem" href="execution.htm">Execution</a></li>
                        <li class="navListItem"><a class="navItem" href="mempool.htm">Mempool</a></li>
                        <li class="navListItem"><a class="navItem" href="ir-to-bytecode.htm">Move IR Compiler</a></li>
                        <li class="navListItem"><a class="navItem" href="move-language.htm">Move Language</a></li>
                        <li class="navListItem navListItemActive"><a class="navItem" href="network.htm">Network</a></li>
                        <li class="navListItem"><a class="navItem" href="storage.htm">Storage</a></li>
                        <li class="navListItem"><a class="navItem" href="vm.htm">Virtual Machine</a></li>
                      </ul>
                    </div>
                  </ul>
                </div>
                <div class="navGroup">
                  <h3 class="navGroupCategoryTitle">Reference</h3>
                  <ul class="">
                    <li class="navListItem"><a class="navItem" href="libra-cli.htm">Libra CLI</a></li>
                    <li class="navListItem"><a class="navItem" href="glossary.htm">Glossary</a></li>
                  </ul>
                </div>
              </div>
            </section>
          </div>
          <script>
            var coll = document.getElementsByClassName('collapsible');
            var checkActiveCategory = true;
            for (var i = 0; i < coll.length; i++) {
              var links = coll[i].nextElementSibling.getElementsByTagName('*');
              if (checkActiveCategory) {
                for (var j = 0; j < links.length; j++) {
                  if (links[j].classList.contains('navListItemActive')) {
                    coll[i].nextElementSibling.classList.toggle('hide');
                    coll[i].childNodes[1].classList.toggle('rotate');
                    checkActiveCategory = false;
                    break;
                  }
                }
              }

              coll[i].addEventListener('click', function () {
                var arrow = this.childNodes[1];
                arrow.classList.toggle('rotate');
                var content = this.nextElementSibling;
                content.classList.toggle('hide');
              });
            }

            document.addEventListener('DOMContentLoaded', function () {
              createToggler('#navToggler', '#docsNav', 'docsSliderActive');
              createToggler('#tocToggler', 'body', 'tocActive');

              var headings = document.querySelector('.toc-headings');
              headings && headings.addEventListener('click', function (event) {
                var el = event.target;
                while (el !== headings) {
                  if (el.tagName === 'A') {
                    document.body.classList.remove('tocActive');
                    break;
                  } else {
                    el = el.parentNode;
                  }
                }
              }, false);

              function createToggler(togglerSelector, targetSelector, className) {
                var toggler = document.querySelector(togglerSelector);
                var target = document.querySelector(targetSelector);

                if (!toggler) {
                  return;
                }

                toggler.onclick = function (event) {
                  event.preventDefault();

                  target.classList.toggle(className);
                };
              }
            });
          </script>
        </nav>
      </div>
      <div class="container mainContainer">
        <div class="wrapper">
          <div class="post">
            <header class="postHeader"><a class="edit-page-link button"
                href="https://github.com/libra/libra/edit/master/network/README.md" target="_blank"
                rel="noreferrer noopener">Edit</a>
              <h1 class="postHeaderTitle">Network</h1>
            </header>
            <article>
              <div><span>
                  <p>The network component provides peer-to-peer communication primitives to other
                    components of a validator.</p>
                  <h2><a class="anchor" aria-hidden="true" id="overview"></a><a href="network.htm#overview"
                      aria-hidden="true" class="hash-link"><svg class="hash-link-icon" aria-hidden="true" height="16"
                        version="1.1" viewBox="0 0 16 16" width="16">
                        <path fill-rule="evenodd"
                          d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
                        </path>
                      </svg></a>Overview</h2>
                  <p>The network component is specifically designed to facilitate the consensus and
                    shared mempool protocols. Currently, it provides these consumers with two
                    primary interfaces:</p>
                  <ul>
                    <li>RPC, for Remote Procedure Calls; and</li>
                    <li>DirectSend, for fire-and-forget style message delivery to a single receiver.</li>
                  </ul>
                  <p>The network component uses:</p>
                  <ul>
                    <li><a href="https://multiformats.io/multiaddr/">Multiaddr</a> scheme for peer addressing.</li>
                    <li>TCP for reliable transport.</li>
                    <li><a href="https://noiseprotocol.org/noise.html">Noise</a> for authentication and full
                      end-to-end encryption.</li>
                    <li><a href="https://github.com/hashicorp/yamux/blob/master/spec.md">Yamux</a> for
                      multiplexing substreams over a single connection.</li>
                    <li>Push-style <a href="https://en.wikipedia.org/wiki/Gossip_protocol">gossip</a> for peer
                      discovery.</li>
                  </ul>
                  <p>Each new substream is assigned a <em>protocol</em> supported by both the sender and
                    the receiver. Each RPC and DirectSend type corresponds to one such protocol.</p>
                  <p>Only eligible members are allowed to join the inter-validator network. Their
                    identity and public key information is provided by the consensus
                    component at initialization and on updates to system membership. A new
                    validator also needs the network addresses of a few <em>seed</em> peers to help it
                    bootstrap connectivity to the network. The seed peers first authenticate the
                    joining validator as an eligible member and then share their network state
                    with it.</p>
                  <p>Each member of the network maintains a full membership view and connects
                    directly to any validator it needs to communicate with. A validator that cannot
                    be connected to directly is assumed to fall in the quota of Byzantine faults
                    tolerated by the system.</p>
                  <p>Validator health information, determined using periodic liveness probes, is not
                    shared between validators; instead, each validator directly monitors its peers
                    for liveness.</p>
                  <p>This approach should scale up to a few hundred validators before requiring
                    partial membership views, sophisticated failure detectors, or network overlays.</p>
                  <h2><a class="anchor" aria-hidden="true" id="implementation-details"></a><a
                      href="network.htm#implementation-details" aria-hidden="true" class="hash-link"><svg
                        class="hash-link-icon" aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16"
                        width="16">
                        <path fill-rule="evenodd"
                          d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
                        </path>
                      </svg></a>Implementation Details</h2>
                  <h3><a class="anchor" aria-hidden="true" id="system-architecture"></a><a
                      href="network.htm#system-architecture" aria-hidden="true" class="hash-link"><svg
                        class="hash-link-icon" aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16"
                        width="16">
                        <path fill-rule="evenodd"
                          d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
                        </path>
                      </svg></a>System Architecture</h3>
                  <pre><code class="hljs">                             +---------------------+---------------------+
                             |      Consensus      |       Mempool       |
                             +---------------------+---------------------+
                             |            Validator Network              |
                             +---------------------+---------------------+
                             |            NetworkProvider                |
+------------------------------------------------+-----------------+     |
| Discovery, health, etc     |            RPC    |  DirectSend     |     |
+--------------+---------------------------------------------------------+
|                                         Peer Manager                   |
+------------------------------------------------------------------+-----+
</code></pre>
                  <p>The network component is implemented in the
                    <a href="https://en.wikipedia.org/wiki/Actor_model">Actor</a> programming model —
                    i.e., it uses message-passing to communicate between different subcomponents
                    running as independent &quot;tasks.&quot; The <a href="https://tokio.rs/">tokio</a> framework is
                    used as the task runtime. The different subcomponents in the network component
                    are:</p>
                  <ul>
                    <li><strong>NetworkProvider</strong> — Exposes network API to clients. It forwards
                      requests from upstream clients to appropriate downstream components and sends
                      incoming RPC and DirectSend requests to appropriate upstream handlers.</li>
                    <li><strong>Peer Manager</strong> — Listens for incoming connections and dials other
                      peers on the network. It also notifies other components about new/lost
                      connection events and demultiplexes incoming substreams to appropriate protocol
                      handlers.</li>
                    <li><strong>Connectivity Manager</strong> — Ensures that we remain connected to a node
                      if and only if it is an eligible member of the network. Connectivity Manager
                      receives addresses of peers from the Discovery component and issues
                      dial/disconnect requests to the Peer Manager.</li>
                    <li><strong>Discovery</strong> — Uses push-style gossip for discovering new peers and
                      updates to addresses of existing peers. On every <em>tick</em>, it opens a new
                      substream with a randomly selected peer and sends its view of the network to
                      this peer. It informs the connectivity manager of any changes to the network
                      detected from inbound discovery messages.</li>
                    <li><strong>Health Checker</strong> — Performs periodic liveness probes to ensure the
                      health of a peer/connection. It resets the connection with the peer if a
                      configurable number of probes fail in succession. Probes currently fail on a
                      configurable static timeout.</li>
                    <li><strong>Direct Send</strong> — Allows sending/receiving messages to/from remote
                      peers. It notifies upstream handlers of inbound messages.</li>
                    <li><strong>RPC</strong> — Allows sending/receiving RPCs to/from other peers. It notifies
                      upstream handlers about inbound RPCs. The upstream handler is passed a channel
                      through which can send a serialized response to the caller.</li>
                  </ul>
                  <p>In addition to the subcomponents described above, the network component
                    consists of utilities to perform encryption, transport multiplexing, protocol
                    negotiation, etc.</p>
                  <h2><a class="anchor" aria-hidden="true" id="how-is-this-module-organized"></a><a
                      href="network.htm#how-is-this-module-organized" aria-hidden="true" class="hash-link"><svg
                        class="hash-link-icon" aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16"
                        width="16">
                        <path fill-rule="evenodd"
                          d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
                        </path>
                      </svg></a>How is this module organized?</h2>
                  <pre><code class="hljs">network
├── benches                       # network benchmarks
├── memsocket                     # In-memory transport for tests
├── netcore
│   └── src
│       ├── multiplexing          # substream multiplexing over a transport
│       ├── negotiate             # protocol negotiation
│       └── transport             # composable transport API
├── noise                         # noise framework for authentication and encryption
└── src
    ├── channel                    # mpsc channel wrapped in IntGauge
    ├── connectivity_manager       # component to ensure connectivity to peers
    ├── interface                  # generic network API
    ├── peer_manager               # component to dial/listen for connections
    ├── proto                      # protobuf definitions for network messages
    ├── protocols                  # message protocols
    │   ├── direct_send            # protocol for fire-and-forget style message delivery
    │   ├── discovery              # protocol for peer discovery and gossip
    │   ├── health_checker         # protocol for health probing
    │   └── rpc                    # protocol for remote procedure calls
    ├── sink                       # utilities over message sinks
    └── validator_network          # network API for consensus and mempool
</code></pre>
                </span></div>
            </article>
          </div>
          <div class="docs-prevnext"><a class="docs-prev button" href="move-language.htm"><span class="arrow-prev">←
              </span><span>Move Language</span></a><a class="docs-next button"
              href="storage.htm"><span>Storage</span><span class="arrow-next"> →</span></a></div>
        </div>
      </div>
      <nav class="onPageNav">
        <ul class="toc-headings">
          <li><a href="network.htm#overview">Overview</a></li>
          <li><a href="network.htm#implementation-details">Implementation Details</a>
            <ul class="toc-headings">
              <li><a href="network.htm#system-architecture">System Architecture</a></li>
            </ul>
          </li>
          <li><a href="network.htm#how-is-this-module-organized">How is this module organized?</a></li>
        </ul>
      </nav>
    </div>
    <footer class="nav-footer" id="footer">
        <section class="sitemap"><a href="https://developers.libra.org/" class="nav-home"><img
              src="libra-logomark-white.png" alt="Libra" /></a>
          <div class="footerSection">
            <h5>Learn About Libra</h5><a href="welcome-to-libra.htm">Welcome to Libra</a><a
              href="libra-protocol.htm">Libra Protocol</a><a href="the-libra-blockchain-paper.htm">Libra Blockchain</a><a
              href="life-of-a-transaction.htm">Life of a Transaction</a>
            <p></p>
            <h5>Try Libra Core </h5><a href="my-first-transaction.htm">My First Transaction</a><a
              href="move-overview.htm">Getting Started With Move</a>
          </div>
          <div class="footerSection">
            <h5>Policies</h5><a href="privacy-policy.htm">Privacy Policy</a><a href="terms-of-use.htm">Terms of Use</a><a
              href="cookies-policy.htm">Cookies Policy</a><a href="code-of-conduct.htm">Code of Conduct</a>
            <p></p>
            <h5>Community</h5><a href="https://community.libra.org/">Developer Forum</a><a
              href="https://developers.libra.org/newsletter_form">Newsletter</a>
          </div>
          <div class="footerSection">
            <h5>Libra Developer Community</h5>
            <img style="width:300px" src='qr_violas.png'>
            <h5>Join us with scan and enter libra<h5>
          </div>
        </section>
        <section class="copyright"> © Violas Association</section>
      </footer>
  </div>
  <script type="text/javascript" src="https://cdn.jsdelivr.net/docsearch.js/1/docsearch.min.js"></script>
  <script>
    document.addEventListener('keyup', function (e) {
      if (e.target !== document.body) {
        return;
      }
      // keyCode for '/' (slash)
      if (e.keyCode === 191) {
        const search = document.getElementById('search_input_react');
        search && search.focus();
      }
    });
  </script>
  <script>
    var search = docsearch({

      apiKey: '0d48ee629d39ddc4916eeef7755a0c4c',
      indexName: 'libra',
      inputSelector: '#search_input_react'
    });
  </script>
</body>

</html>