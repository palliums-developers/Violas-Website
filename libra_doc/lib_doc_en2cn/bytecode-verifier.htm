<!DOCTYPE html>
<html lang="en">

<head>
  <meta charSet="utf-8" />
  <meta http-equiv="X-UA-Compatible" content="IE=edge" />
  <title>Bytecode Verifier · Libra</title>
  <meta name="viewport" content="width=device-width" />
  <meta name="generator" content="Docusaurus" />
  <meta name="description" content="## Overview" />
  <meta name="docsearch:language" content="en" />
  <meta property="og:title" content="Bytecode Verifier · Libra" />
  <meta property="og:type" content="website" />
  <meta property="og:url" content="https://developers.libra.org/" />
  <meta property="og:description" content="## Overview" />
  <meta property="og:image" content="https://developers.libra.org/img/libra.png" />
  <meta name="twitter:card" content="summary" />
  <meta name="twitter:image" content="https://developers.libra.org/img/libra.png" />
  <link rel="shortcut icon" href="libra.ico" />
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/docsearch.js/1/docsearch.min.css" />
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/9.12.0/styles/default.min.css" />
  <link rel="alternate" type="application/atom+xml" href="atom.xml" title="Libra Blog ATOM Feed" />
  <link rel="alternate" type="application/rss+xml" href="feed.xml" title="Libra Blog RSS Feed" />
  <script type="text/javascript" src="buttons.js"></script>
  <script type="text/javascript" src="code_block_buttons.js"></script>
  <script type="text/javascript" src="cookie_banner.js"></script>
  <script type="text/javascript" src="disable_adblock.js"></script>
  <script type="text/javascript" src="segment.analytics.min.js"></script>
  <script type="text/javascript" src="segment.js"></script>
  <script type="text/javascript" src="clipboardjs.2.0.0.min.js"></script>
  <script type="text/javascript" src="forms.js"></script>
  <script src="scrollSpy.js"></script>
  <link rel="stylesheet" href="main.css" />
  <script src="codetabs.js"></script>
</head>

<body class="sideNavVisible separateOnPageNav">
  <div class="fixedHeaderContainer">
    <div class="headerWrapper wrapper">
      <header><a href="https://developers.libra.org/"><img class="logo" src="libra-nav-logo.png" alt="Libra" />
          <h2 class="headerTitleWithLogo">Libra</h2>
        </a>
        <div class="navigationWrapper navigationSlider">
          <nav class="slidingNav">
            <ul class="nav-site nav-site-internal">
              <li class=""><a href="https://violas.io/">主页</a></li>
              <li class="siteNavGroupActive siteNavItemActive"><a href="welcome-to-libra.htm" target="_self">文档</a></li>
              <li class=""><a href="https://community.libra.org" target="_self">Libra 社区</a></li>
              <li class=""><a href="blog_2.html" target="_self">Libra Blog</a></li>
              <li class=""><a href="https://libra.org" target="_self">libra 官网</a></li>
              <li class=""><a href="https://github.com/libra/libra" target="_self">Libra GitHub</a></li>
              <li class=""><a href="../lib_doc_en/bytecode-verifier.htm" target="_self">中/EN</a></li>
              <li class="navSearchWrapper reactNavSearchWrapper"><input type="text" id="search_input_react"
                  placeholder="Search" title="Search" /></li>
            </ul>
          </nav>
        </div>
      </header>
    </div>
  </div>
  <div class="navPusher">
    <div class="docMainWrapper wrapper">
      <div class="docsNavContainer" id="docsNav">
        <nav class="toc">
          <div class="toggleNav">
            <section class="navWrapper wrapper">
              <div class="navBreadcrumb wrapper">
                <div class="navToggle" id="navToggler">
                  <div class="hamburger-menu">
                    <div class="line1"></div>
                    <div class="line2"></div>
                    <div class="line3"></div>
                  </div>
                </div>
                <h2><i>›</i><span>学习 Libra</span></h2>
                <div class="tocToggler" id="tocToggler"><i class="icon-toc"></i></div>
              </div>
              <div class="navGroups">
                <div class="navGroup">
                  <h3 class="navGroupCategoryTitle">学习 Libra</h3>
                  <ul class="">
                    <li class="navListItem"><a class="navItem" href="welcome-to-libra.htm">欢迎</a>
                    </li>
                    <li class="navListItem"><a class="navItem" href="libra-protocol.htm">Libra 协议: 核心概念</a></li>
                    <li class="navListItem"><a class="navItem" href="life-of-a-transaction.htm">交易的生命周期</a></li>
                    <div class="navGroup subNavGroup">
                      <h4 class="navGroupSubcategoryTitle">技术论文</h4>
                      <ul>
                        <li class="navListItem"><a class="navItem" href="the-libra-blockchain-paper.htm">Libra 区块链</a>
                        </li>
                        <li class="navListItem"><a class="navItem" href="move-paper.htm">Move: 一种可编程资源的语言</a></li>
                        <li class="navListItem"><a class="navItem"
                            href="state-machine-replication-paper.htm">Libra区块链中状态机的复制</a></li>
                      </ul>
                    </div>
                  </ul>
                </div>
                <div class="navGroup">
                  <h3 class="navGroupCategoryTitle">学习Libra核心</h3>
                  <ul class="">
                    <li class="navListItem"><a class="navItem" href="my-first-transaction.htm">我的第一笔交易</a>
                    </li>
                    <li class="navListItem"><a class="navItem" href="move-overview.htm">Move概述</a>
                    </li>
                    <li class="navListItem"><a class="navItem" href="run-local-network.htm">在本地网络上运行</a></li>
                    <li class="navListItem"><a class="navItem" href="run-move-locally.htm">本地运行Move程序</a>
                    </li>
                  </ul>
                </div>
                <div class="navGroup">
                  <h3 class="navGroupCategoryTitle">社区</h3>
                  <ul class="">
                    <li class="navListItem"><a class="navItem" href="libra-open-source-paper.htm">Libra开源</a>
                    </li>
                    <li class="navListItem"><a class="navItem" href="contributing.htm">贡献指南</a></li>
                    <li class="navListItem"><a class="navItem" href="coding-guidelines.htm">代码指南</a></li>
                    <li class="navListItem"><a class="navItem" href="security.htm">报告漏洞</a></li>
                  </ul>
                </div>
                <div class="navGroup">
                  <h3 class="navGroupCategoryTitle">Libra 协议实现</h3>
                  <ul class="">
                    <li class="navListItem"><a class="navItem" href="libra-core-overview.htm">Libra Core概述</a>
                    </li>
                    <div class="navGroup subNavGroup">
                      <h4 class="navGroupSubcategoryTitle">READMEs</h4>
                      <ul>
                        <li class="navListItem"><a class="navItem" href="admission-control.htm">准入控制 admission
                            control</a>
                        </li>
                        <li class="navListItem navListItemActive"><a class="navItem" href="bytecode-verifier.htm">字节码验证器
                            Bytecode Verifier</a>
                        </li>
                        <li class="navListItem"><a class="navItem" href="consensus.htm">共识组件 Consensus</a></li>
                        <li class="navListItem"><a class="navItem" href="crypto.htm">加密组件 Crypto</a></li>
                        <li class="navListItem"><a class="navItem" href="execution.htm">执行组件 Execution</a></li>
                        <li class="navListItem"><a class="navItem" href="mempool.htm">内存池 Mempool</a></li>
                        <li class="navListItem"><a class="navItem" href="ir-to-bytecode.htm">Move IR 编译器</a></li>
                        <li class="navListItem"><a class="navItem" href="move-language.htm">Move 语言</a></li>
                        <li class="navListItem"><a class="navItem" href="network.htm">网络组件 Network</a></li>
                        <li class="navListItem"><a class="navItem" href="storage.htm">存储组件 Storage</a></li>
                        <li class="navListItem"><a class="navItem" href="vm.htm">虚拟机 Virtual Machine</a></li>
                      </ul>
                    </div>
                  </ul>
                </div>
                <div class="navGroup">
                  <h3 class="navGroupCategoryTitle">参考引用</h3>
                  <ul class="">
                    <li class="navListItem"><a class="navItem" href="libra-cli.htm">Libra命令行工具</a></li>
                    <li class="navListItem"><a class="navItem" href="glossary.htm">词汇表</a></li>
                  </ul>
                </div>
              </div>
            </section>
          </div>
          <script>
            var coll = document.getElementsByClassName('collapsible');
            var checkActiveCategory = true;
            for (var i = 0; i < coll.length; i++) {
              var links = coll[i].nextElementSibling.getElementsByTagName('*');
              if (checkActiveCategory) {
                for (var j = 0; j < links.length; j++) {
                  if (links[j].classList.contains('navListItemActive')) {
                    coll[i].nextElementSibling.classList.toggle('hide');
                    coll[i].childNodes[1].classList.toggle('rotate');
                    checkActiveCategory = false;
                    break;
                  }
                }
              }

              coll[i].addEventListener('click', function () {
                var arrow = this.childNodes[1];
                arrow.classList.toggle('rotate');
                var content = this.nextElementSibling;
                content.classList.toggle('hide');
              });
            }

            document.addEventListener('DOMContentLoaded', function () {
              createToggler('#navToggler', '#docsNav', 'docsSliderActive');
              createToggler('#tocToggler', 'body', 'tocActive');

              var headings = document.querySelector('.toc-headings');
              headings && headings.addEventListener('click', function (event) {
                var el = event.target;
                while (el !== headings) {
                  if (el.tagName === 'A') {
                    document.body.classList.remove('tocActive');
                    break;
                  } else {
                    el = el.parentNode;
                  }
                }
              }, false);

              function createToggler(togglerSelector, targetSelector, className) {
                var toggler = document.querySelector(togglerSelector);
                var target = document.querySelector(targetSelector);

                if (!toggler) {
                  return;
                }

                toggler.onclick = function (event) {
                  event.preventDefault();

                  target.classList.toggle(className);
                };
              }
            });
          </script>
        </nav>
      </div>
      <div class="container mainContainer">
        <div class="wrapper">
          <div class="post">
            <header class="postHeader"><a class="edit-page-link button"
                href="https://github.com/libra/libra/edit/master/language/bytecode_verifier/README.md" target="_blank"
                rel="noreferrer noopener">编辑</a>
              <h1 class="postHeaderTitle">字节码验证程序</h1>
            </header>
            <article>
              <div><span>
                  <h2><a class="anchor" aria-hidden="true" id="overview"></a><a href="bytecode-verifier.htm#overview"
                      aria-hidden="true" class="hash-link"><svg class="hash-link-icon" aria-hidden="true" height="16"
                        version="1.1" viewBox="0 0 16 16" width="16">
                        <path fill-rule="evenodd"
                          d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
                        </path>
                      </svg></a>字节码验证程序：用于检查堆栈使用、类型、资源及引用的安全性</h2>
                  <p>编译后的模块中每个函数体分别进行单独验证，同时验证信任模块中函数签名的正确性。</p>
                  <p>检查每个函数签名是否匹配其自定义内容，单独执行验证。 函数体是一系列字节码指令。 这个指令在下面描述的几个阶段中检查。</p>
                  <h2><a class="anchor" aria-hidden="true" id="cfg-construction"></a><a
                      href="bytecode-verifier.htm#cfg-construction" aria-hidden="true" class="hash-link"><svg
                        class="hash-link-icon" aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16"
                        width="16">
                        <path fill-rule="evenodd"
                          d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
                        </path>
                      </svg></a>CFG 构建</h2>
                  <p>通过将指令集拆解为一组基本块，构造一个控制流程图。每个基本块包含一系列连续的指令; 所有指令集都存在于块中。每个块以分支或返回指令结束。块的分解可确保分支只在某个块的开头处。 分解还试图确保生成的块是最大的。 但是，分析的可靠性不依赖于最大化。</p>
                  <h2><a class="anchor" aria-hidden="true" id="stack-safety"></a><a
                      href="bytecode-verifier.htm#stack-safety" aria-hidden="true" class="hash-link"><svg
                        class="hash-link-icon" aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16"
                        width="16">
                        <path fill-rule="evenodd"
                          d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
                        </path>
                      </svg></a>堆栈安全</h2>
                  <p>块的执行发生在局部变量数组和堆栈中。函数的参数是局部变量数组的前缀。跨函数调用传递参数和返回值都是通过堆栈完成的。当函数开始执行时，其参数已经加载到其参数中。假设函数开始执行时堆栈高度为<em>n</em>;那么有效的字节码必须强制不执行，也就是执行开始，基本块的堆栈高度为<em>n</em>。此外，在返回指令处，堆栈高度必须是<em>n</em>+<em>k</em> where <em>k</em>, s.t。 <em>k</em>&gt;=0 是返回值的数量。第一阶段通过分别分析每个块来检查是否保持了这个高度不变，计算块中每个指令对堆栈高度的影响，检查高度是否低于<em>n</em>，并且保留在<em>n</em> 或
                    <em>n</em>+<em>k</em> （取决于块的最终指令和函数的返回类型）</p>
                  <h2><a class="anchor" aria-hidden="true" id="type-safety"></a><a
                      href="bytecode-verifier.htm#type-safety" aria-hidden="true" class="hash-link"><svg
                        class="hash-link-icon" aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16"
                        width="16">
                        <path fill-rule="evenodd"
                          d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
                        </path>
                      </svg></a>类型安全</h2>
                  <p>分析第二阶段检查是否使用原始函数或已定义函数的参数来调用每个操作。 操作的操作数是位于局部变量或堆栈中的值。 字节码中已经提供了函数的局部变量类型。 但是，需要堆栈值的类型。 可以针对每个块单独地进行该推断和每个操作的类型检查。 由于每个块开始时的堆栈高度为 <em>n</em>，并且在执行块期间不会低于<em>n</em> 因此我们只需要对从 <em>n</em> 始的堆栈的后缀进行检查，以便对块指令进行类型检查。 我们使用一堆类型对此后缀进行检查，在处理块中的指令流时，在这些类型上推送和返回类型。 堆栈类型和静态已知类型的局部变量键入来检查每条指令。</p>
                  <h2><a class="anchor" aria-hidden="true" id="resource-safety"></a><a
                      href="bytecode-verifier.htm#resource-safety" aria-hidden="true" class="hash-link"><svg
                        class="hash-link-icon" aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16"
                        width="16">
                        <path fill-rule="evenodd"
                          d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
                        </path>
                      </svg></a>资源安全</h2>
                  <p>资源代表区块链上的资产。 因此，对这些类型存在某些限制，这些限制不适用于正常值。 直观地说，资源值无法复制，必须在交易结束时使用（这意味着到达全局存储或销毁）。 具体而言，有以下限制：</p>
                  <ul>
                    <li><code>CopyLoc</code>  和 <code>StLoc</code> 要求本地类型不是资源类型。</li>
                    <li><code>WriteRef</code>, <code>Eq</code>, 和 <code>Neq</code> 要求引用的类型不属于资源类型。</li>
                    <li>在函数结束时  (达到 <code>Ret</code>),任何类型为资源类型的局部变量都不能为空，即该值必须已从本地移出。</li>
                  </ul>
                  <p>如上所述，围绕 <code>Ret</code> 的最后一条规则意味着资源<em>必须</em>是：</p>
                  <ul>
                    <li>通过<code>MoveToSender</code>移动到全局存储。</li>
                    <li>通过 <code>Unpack</code>销毁。</li>
                  </ul>
                  <p><code>MoveToSender</code> 和 <code>Unpack</code>都位于资源模块内部。</p>
                  <h2><a class="anchor" aria-hidden="true" id="reference-safety"></a><a
                      href="bytecode-verifier.htm#reference-safety" aria-hidden="true" class="hash-link"><svg
                        class="hash-link-icon" aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16"
                        width="16">
                        <path fill-rule="evenodd"
                          d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
                        </path>
                      </svg></a>安全参考</h2>
                  <p>引用在字节码语言中是一等的。函数可以通过以下几种方式获得新的引用:</p>
                  <ul>
                    <li>输入参数。</li>
                    <li>获取局部变量中地址值。</li>
                    <li>获取全局发布地址值。</li>
                    <li>从对包含结构的引用中获取地址的字段。</li>
                    <li>函数返回值。</li>
                  </ul>
                  <p>引用安全性检查的目的是确保没有空引用。下面是空引用的一些例子:</p>
                  <ul>
                    <li>局部变量<code>y</code>包含对局部变量
                      <code>x</code>中的值的引用；然后移动 <code>x</code>。</li>
                    <li>局部变量<code>y</code> 包含对局部变量
                      <code>x</code>中的值的引用; 然后将  <code>x</code> 绑定到一个新值。</li>
                    <li>引用尚未初始化的局部变量。</li>
                    <li>从函数返回中对局部变量中的值引用。</li>
                    <li>引用 <code>r</code>指向全局发布的值 <code>v</code>; <code>v</code>
                      则未发布。</li>
                  </ul>
                  <p>引用可以是独占的，也可以是共享的; 后者只允许读访问。 参考安全检查的第二个目标就是确保在字节码程序执行中 - 包括整个堆栈和所有功能框架 - 如果有两个不同的存储位置包含了引用<code>r1</code> 和 <code>r2</code> 那么<code>r2</code>
                    扩展 <code>r1</code>, 然后满足以下两个条件：</p>
                  <ul>
                    <li>如果 <code>r1</code>被标记为独占，则它必须是不活动的，即<code>r1</code> 不能被解除引用或变更位置。</li>
                    <li>如果 <code>r1</code>是共享的,那么<code>r2</code> 也是共享的。</li>
                  </ul>
                  <p>The two conditions above establish the property of referential transparency, important for scalable
                    program verification, which looks roughly as follows:考虑一段代码
                    <code>v1 = *r; S; v2 = *r</code>, 其中 <code>S</code> 是一个任意计算，
                    它不通过语法引用 <code>r</code> 执行任何写操作（并且没有写任何扩展 
                    <code>r'</code> 的 <code>r</code>）。 然后  <code>v1 == v2</code>.</p>
                  <h3><a class="anchor" aria-hidden="true" id="analysis-setup"></a><a
                      href="bytecode-verifier.htm#analysis-setup" aria-hidden="true" class="hash-link"><svg
                        class="hash-link-icon" aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16"
                        width="16">
                        <path fill-rule="evenodd"
                          d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
                        </path>
                      </svg></a>设置分析</h3>
                  <p>参考安全性分析设置为流分析（或者对那些熟悉概念的人进行抽象解释）。 抽象状态是为抽象地执行基本块的代码而定义的。 从基本块到抽象状态映射维护。 给定基本块<em>B</em> 开头的抽象状态为<em>S</em>， <em>B</em>的抽象执行导致状态<em>S'</em>。该状态
                    <em>S'</em> 传播到 <em>B</em> 的所有后续并记录在映射中。 如果某个状态已经存在，则新广播的状态将与现有状态“连接”。连接可能会失败，在这种情况下会报告错误。 如果连接成功但抽象状态保持不变，则不再进行广播。否则，状态将更新并再次通过块传播。在抽象状态通过块传播期间处理指令时，也可能报告错误。 这种传播终止是因为 ...</p>
                  <h3><a class="anchor" aria-hidden="true" id="abstract-state"></a><a
                      href="bytecode-verifier.htm#abstract-state" aria-hidden="true" class="hash-link"><svg
                        class="hash-link-icon" aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16"
                        width="16">
                        <path fill-rule="evenodd"
                          d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
                        </path>
                      </svg></a>抽象状态.</h3>
                  <p>抽象状态有三个组成部分：</p>
                  <ul>
                    <li>从本地到抽象值的部分映射。不在此映射范围内的本地不可用。可用性是初始化概念的概括。由于被移动，局部变量在初始化之后可能变得不可用。抽象值是 <em>Reference</em>(<em>n</em>) （对于引用类型的变量） 或
                      <em>Value</em>(<em>ns</em>) （对于值类型的变量）， 其中 <em>n</em> 是nonce，
                      <em>ns</em> 是一组nonces。nonce是一个常量，用于表示引用。 设
                      <em>Nonce</em>表示所有nonce的集合。 如果局部变量  <em>l</em>  映射到
                      <em>Value</em>(<em>ns</em>), 则意味着有未完成的引用指向存储在 <em>l</em>中的值。对于<em>ns</em>中的每个成员<em>n</em>,必须有一个局部变量<em>l</em>映射到<em>Reference</em>(<em>n</em>). 如果局部变量 <em>x</em> 映射到 <em>Reference</em>(<em>n</em>) 并且局部变量 <em>y</em> 和 <em>z</em>
                      分别映射 <em>Value</em>(<em>ns1</em>) 和 <em>Value</em>(<em>ns2</em>), 那么 <em>n</em> 可能是 <em>ns1</em> 和 <em>ns2</em>的成员。 这仅仅意味着分析是有损的。<em>l</em> 映射到 <em>Value</em>({}) 时的特殊情况意味着没有对 <em>l</em>的引用，因此 <em>l</em> 可能被销毁或移动。</li>
                    <li>从本地变量到抽象值的局部映射本身不足以检查字节码程序，因为由字节码操纵的值可以是大型嵌套结构，且引用指向中间。指向值中间的引用可以扩展以生成另一个引用。某些扩展名应被允许，而其他扩展名则不应被允许。为了跟踪引用之间的相对扩展，抽象状态具有第二个组件。此组件是从随机数到以下两种借用信息之一的映射：</li>
                    <li>一组nonce。</li>
                    <li>从字段到nonces组的映射。</li>
                  </ul>
                  <p>当前的实现将此信息存储为两个单独的映射，这些映射具有互斥的域:
                  </p>
                  <ul>
                    <li><em>borrowed_by</em>  从<em>Nonce</em> 映射到  <em>Set</em>&lt;<em>Nonce</em>&gt;.</li>
                    <li><em>fields_borrowed_by</em> 从 <em>Nonce</em> 映射到 <em>Map</em>&lt;<em>Field</em>,
                      <em>Set</em>&lt;<em>Nonce</em>&gt;&gt;.
                      <ul>
                        <li>如果 <em>n2</em> 在 <em>borrowed_by</em>[<em>n1</em>], 则表示由 <em>n2</em> 表示的引用是由<em>n1</em>.</li>
                        <li>如果<em>fields_borrowed_by</em>[<em>n1</em>][<em>f</em>] 中的<em>n2</em>, 则由<em>n2</em> 表示的引用是由<em>n1</em> 表示的引用的 <em>f</em>扩展后的扩展。 基于这种方式，将一个 nonce <em>n</em>从<em>fields_borrowed_by</em> 的域移动到
                          <em>borrowed_by</em>的域是一个合理的扩展，通过采用对应于 <em>fields_borrowed_by</em> 域中所有字段的所有nonce集的并集[<em>n</em>].</li>
                      </ul>
                    </li>
                    <li>要在块的指令之间传播抽象状态，还必须对堆栈上的值和引用进行创建。 我们之前已经描述了如何将可用堆栈后缀创建为一堆类型。 我们现在将此堆栈的内容扩充为包含类型和抽象值的结构。 我们维护不变量，即堆栈上的非引用值不能对它们进行挂起。 因此，如果堆栈上有一个抽象值 <em>Value</em>(<em>ns</em>), 则 <em>ns</em> 为空。</li>
                  </ul>
                  <h3><a class="anchor" aria-hidden="true" id="values-and-references"></a><a
                      href="bytecode-verifier.htm#values-and-references" aria-hidden="true" class="hash-link"><svg
                        class="hash-link-icon" aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16"
                        width="16">
                        <path fill-rule="evenodd"
                          d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
                        </path>
                      </svg></a>值和引用.</h3>
                  <p>让我们仔细看看共享和独占的值和引用是如何建模的。</p>
                  <ul>
                    <li>非参考值被建模为 <em>Value</em>(<em>ns</em>) 其中 <em>ns</em> 是表示借用引用的一组nonce。 仅当 <em>ns</em>为空时，才会认为此值的销毁/移动/复制是安全的。 堆栈上的值通常满足此属性，但局部变量中的值可能不满足。</li>
                    <li>引用被建模为 <em>Reference</em>(<em>n</em>), 其中 <em>n</em> 是随机数。 如果引用被标记为共享，则始终允许读访问，并且永远不允许写访问。如果引用 <em>Reference</em>(<em>n</em>)被标记为独占， 则仅当 <em>n</em> 没有借用时才允许写访问，如果从 <em>n</em> 借用的所有随机数驻留在被标记的引用中，则允许读访问和共享。   此外，构造引用的规则保证了引用标记共享的扩展也必须被标记为共享。 这些检查共同提供了前面提到的参考透明性。</li>
                  </ul>
                  <p>目前，字节码语言不包含任何用于共享引用的直接构造函数。 <code>BorrowLoc</code> 和 <code>BorrowGlobal</code> 创建独占引用。
                    <code>BorrowField</code> 创建一个从源引用继承其标记的引用。 移动（当应用包含引用本地时）将引用从局部变量移动到堆栈。 <code>FreezeRef</code> 用于将现有的独占引用转换为共享引用。 将来，我们可能会添加一个生成共享引用的 <code>BorrowGlobal</code> 版本</p>
                  <p><strong>报错.</strong> 如前所述，检查人在以下某种情况下报告错误：</p>
                  <ul>
                    <li>在通过块传播抽象状态期间，不能证明指令是安全的。</li>
                    <li>通过不同传入边，传播进来的的抽象状态联接到块中失败。</li>
                  </ul>
                  <p>让我们仔细看看上面的错误报告的第二个原因。 请注意，表示可用堆栈后缀的类型和抽象值，在对的堆栈在块的开头是空的。 因此，连接仅在表示可用局部变量和借用信息的抽象状态上发生。 仅当两个边上的可用局部变量集不同时，连接才会失败。 如果可用变量集是相同的，则连接本身很简单 - 借用集是逐步联合的。 但有两个细微之处值得一提：</p>
                  <ul>
                    <li>沿着两条边的抽象状态中使用的一组随机数可能彼此没有任何连接。 由于实际的随机数值并不重要，因此在执行连接之前，将随机数映射到固定整数（包含随机数的局部变量的索引）。</li>
                    <li>在连接期间，如果nonce <em>n</em> 位于另一侧的 borrowed_by 域和 fields_borrowed_by 域中，则<em>n</em> 在执行连接之前从 fields_borrowed_by 移动到 borrowed_by。</li>
                  </ul>
                  <h3><a class="anchor" aria-hidden="true" id="borrowing-references"></a><a
                      href="bytecode-verifier.htm#borrowing-references" aria-hidden="true" class="hash-link"><svg
                        class="hash-link-icon" aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16"
                        width="16">
                        <path fill-rule="evenodd"
                          d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
                        </path>
                      </svg></a>借用参考</h3>
                  <p>每个引用构造函数 &mdash; <code>BorrowLoc</code>, <code>BorrowField</code>,
                    <code>BorrowGlobal</code>, <code>FreezeRef</code>, and <code>CopyLoc</code> &mdash; 都是通过生成新的nonce来建模的。 当 <code>BorrowLoc</code> 借用局部变量中的值时， <code>BorrowGlobal</code> 借用了全局值。
                    <code>BorrowField</code>, <code>FreezeRef</code>, and <code>CopyLoc</code> （应用于包含引用的本地值）从源引用借用。 由于每个新的nonce与所有先前生成的nonce不同，因此分析保持不变量，即所有可用的局部变量和引用类型的堆栈位置具有表示其抽象值的不同nonce。 另一个重要的不变量是借用信息中引用的每个随机数必须驻留在表示局部变量或堆栈位置的某个抽象值中。</p>
                  <h3><a class="anchor" aria-hidden="true" id="releasing-references"></a><a
                      href="bytecode-verifier.htm#releasing-references" aria-hidden="true" class="hash-link"><svg
                        class="hash-link-icon" aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16"
                        width="16">
                        <path fill-rule="evenodd"
                          d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
                        </path>
                      </svg></a>引用释放</h3>
                  <p>全局和本地引用由 <code>ReleaseRef</code> 操作发布。   必须显式地释放引用。从函数的局部变量中返回具有未释放引用的函数值是错误的。 必须显示释放所有引用。 因此，使用 <code>StLoc</code> 操作覆盖可用引用是错误的。</p>
                  <p>当操作 <code>ReadRef</code>,
                    <code>WriteRef</code>, <code>Eq</code> and <code>Neq</code>时，将隐式释放引用。</p>
                  <h3><a class="anchor" aria-hidden="true" id="global-references"></a><a
                      href="bytecode-verifier.htm#global-references" aria-hidden="true" class="hash-link"><svg
                        class="hash-link-icon" aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16"
                        width="16">
                        <path fill-rule="evenodd"
                          d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
                        </path>
                      </svg></a>全局引用</h3>
                  <p>全局引用的安全性取决于静态和动态分析的组合。 静态分析不区分全局和本地引用。 但动态分析区分它们并对全局引用执行引用计数，如下所示：字节码解释器将一对映射 <code>M</code> 从一对地址和完全限定的资源类型维护到一个 union（Rust枚举），包含以下值：</p>
                  <ul>
                    <li><code>Empty</code></li>
                    <li><code>RefCount(n)</code> 某值n（计数） <code>n</code> &gt;= 0</li>
                  </ul>
                  <p>解释器对以下操作执行额外的状态更新和检查。在下面的代码中，assert失败指示程序员错误，panic失败指示解释器中的内部错误。</p>
                  <pre><code class="hljs css language-text">MoveFrom<T>(addr) {
    assert M[addr, T] == RefCount(0);
    M[addr, T] := Empty;
}

MoveToSender<T>(addr) {
    assert M[addr, T] == Empty;
    M[addr, T] := RefCount(0);
}

BorrowGlobal<T>(addr) {
    if let RefCount(n) = M[addr, T] then {
        assert n == 0;
        M[addr, T] := RefCount(n+1);
    } else {
        assert false;
    }
}

CopyLoc(ref) {
    if let Global(addr, T) = ref {
        if let RefCount(n) = M[addr, T] then {
            assert n > 0;
            M[addr, T] := RefCount(n+1);
        } else {
            panic false;
        }
    }
}

ReleaseRef(ref) {
    if let Global(addr, T) = ref {
        if let RefCount(n) = M[addr, T] then {
            assert n > 0;
            M[addr, T] := RefCount(n-1);
        } else {
            panic false;
        }
    }
}
</code></pre>
                  <p>上面规则没有说明的一个微妙之处是，当应用于全局引用时， <code>BorrowField</code> 和
                    <code>FreezeRef</code>保持引用计数不变。原因是因为这些指令消耗了堆栈顶部的引用，同时在堆栈顶部生成了它的扩展。
                    类似地，由于 <code>ReadRef</code>,
                    <code>WriteRef</code>, <code>Eq</code>, 和 <code>Neq</code> 消耗堆栈顶部的引用，它们将引用计数减少1。</p>
                  <h2><a class="anchor" aria-hidden="true" id="how-is-this-module-organized"></a><a
                      href="bytecode-verifier.htm#how-is-this-module-organized" aria-hidden="true"
                      class="hash-link"><svg class="hash-link-icon" aria-hidden="true" height="16" version="1.1"
                        viewBox="0 0 16 16" width="16">
                        <path fill-rule="evenodd"
                          d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
                        </path>
                      </svg></a>该模块是怎么组织的?</h2>
                  <pre><code class="hljs css language-text">*
├── invalid_mutations  # Library used by proptests
├── src                # Core bytecode verifier files
├── tests              # Proptests
</code></pre>
                </span></div>
            </article>
          </div>
          <div class="docs-prevnext"><a class="docs-prev button" href="admission-control.htm"><span class="arrow-prev">←
              </span><span>准入控制（AC）</span></a><a class="docs-next button"
              href="consensus.htm"><span>共识协议</span><span class="arrow-next"> →</span></a></div>
        </div>
      </div>
      <nav class="onPageNav">
        <ul class="toc-headings">
          <li><a href="bytecode-verifier.htm#overview">总览</a></li>
          <li><a href="bytecode-verifier.htm#cfg-construction">CFG 构建</a></li>
          <li><a href="bytecode-verifier.htm#stack-safety">堆栈安全</a></li>
          <li><a href="bytecode-verifier.htm#type-safety">类型安全</a></li>
          <li><a href="bytecode-verifier.htm#resource-safety">资源安全</a></li>
          <li><a href="bytecode-verifier.htm#reference-safety">安全参考</a>
            <ul class="toc-headings">
              <li><a href="bytecode-verifier.htm#analysis-setup">设置分析</a></li>
              <li><a href="bytecode-verifier.htm#abstract-state">抽象状态</a></li>
              <li><a href="bytecode-verifier.htm#values-and-references">值和引用</a></li>
              <li><a href="bytecode-verifier.htm#borrowing-references">借用参考</a></li>
              <li><a href="bytecode-verifier.htm#releasing-references">引用释放</a></li>
              <li><a href="bytecode-verifier.htm#global-references">全球参考</a></li>
            </ul>
          </li>
          <li><a href="bytecode-verifier.htm#how-is-this-module-organized">该模块如何组织？</a></li>
        </ul>
      </nav>
    </div>
    <footer class="nav-footer" id="footer">
        <section class="sitemap"><a href="https://developers.libra.org/" class="nav-home"><img
              src="libra-logomark-white.png" alt="Libra" /></a>
          <div class="footerSection">
            <h5>Learn About Libra</h5><a href="welcome-to-libra.htm">Welcome to Libra</a><a
              href="libra-protocol.htm">Libra Protocol</a><a href="the-libra-blockchain-paper.htm">Libra Blockchain</a><a
              href="life-of-a-transaction.htm">Life of a Transaction</a>
            <p></p>
            <h5>Try Libra Core </h5><a href="my-first-transaction.htm">My First Transaction</a><a
              href="move-overview.htm">Getting Started With Move</a>
          </div>
          <div class="footerSection">
            <h5>Policies</h5><a href="privacy-policy.htm">Privacy Policy</a><a href="terms-of-use.htm">Terms of Use</a><a
              href="cookies-policy.htm">Cookies Policy</a><a href="code-of-conduct.htm">Code of Conduct</a>
            <p></p>
            <h5>Community</h5><a href="https://community.libra.org/">Developer Forum</a><a
              href="https://developers.libra.org/newsletter_form">Newsletter</a>
          </div>
          <div class="footerSection">
            <h5>Libra开发者社区</h5>
            <img style="width:150px" src='qr_violas.png'>
            <h5>备注”Libra“加群<h5>
          </div>
        </section>
        <section class="copyright"> © Violas Association</section>
      </footer>
  </div>
  <script type="text/javascript" src="https://cdn.jsdelivr.net/docsearch.js/1/docsearch.min.js"></script>
  <script>
    document.addEventListener('keyup', function (e) {
      if (e.target !== document.body) {
        return;
      }
      // keyCode for '/' (slash)
      if (e.keyCode === 191) {
        const search = document.getElementById('search_input_react');
        search && search.focus();
      }
    });
  </script>
  <script>
    var search = docsearch({

      apiKey: '0d48ee629d39ddc4916eeef7755a0c4c',
      indexName: 'libra',
      inputSelector: '#search_input_react'
    });
  </script>
</body>

</html>