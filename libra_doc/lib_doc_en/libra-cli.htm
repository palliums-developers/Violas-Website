<!DOCTYPE html>
<html lang="en">

<head>
  <meta charSet="utf-8" />
  <meta http-equiv="X-UA-Compatible" content="IE=edge" />
  <title>Libra CLI · Libra</title>
  <meta name="viewport" content="width=device-width" />
  <meta name="generator" content="Docusaurus" />
  <meta name="description"
    content="This guide describes how to use the Libra command line interface (CLI) client to interact with the Libra Blockchain. The CLI is invoked as an interactive shell. It provides basic commands to create accounts, mint coins, perform transfers, and query the blockchain. You can use the CLI client to interact with a validator node on the testnet, on a local Libra Blockchain, or on a remote blockchain by specifying the node&#x27;s hostname." />
  <meta name="docsearch:language" content="en" />
  <meta property="og:title" content="Libra CLI · Libra" />
  <meta property="og:type" content="website" />
  <meta property="og:url" content="https://developers.libra.org/" />
  <meta property="og:description"
    content="This guide describes how to use the Libra command line interface (CLI) client to interact with the Libra Blockchain. The CLI is invoked as an interactive shell. It provides basic commands to create accounts, mint coins, perform transfers, and query the blockchain. You can use the CLI client to interact with a validator node on the testnet, on a local Libra Blockchain, or on a remote blockchain by specifying the node&#x27;s hostname." />
  <meta property="og:image" content="https://developers.libra.org/img/libra.png" />
  <meta name="twitter:card" content="summary" />
  <meta name="twitter:image" content="https://developers.libra.org/img/libra.png" />
  <link rel="shortcut icon" href="libra.ico" />
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/docsearch.js/1/docsearch.min.css" />
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/9.12.0/styles/default.min.css" />
  <link rel="alternate" type="application/atom+xml" href="atom.xml" title="Libra Blog ATOM Feed" />
  <link rel="alternate" type="application/rss+xml" href="feed.xml" title="Libra Blog RSS Feed" />
  <script type="text/javascript" src="buttons.js"></script>
  <script type="text/javascript" src="code_block_buttons.js"></script>
  <script type="text/javascript" src="cookie_banner.js"></script>
  <script type="text/javascript" src="disable_adblock.js"></script>
  <script type="text/javascript" src="segment.analytics.min.js"></script>
  <script type="text/javascript" src="segment.js"></script>
  <script type="text/javascript" src="clipboardjs.2.0.0.min.js"></script>
  <script type="text/javascript" src="forms.js"></script>
  <script src="scrollSpy.js"></script>
  <link rel="stylesheet" href="main.css" />
  <script src="codetabs.js"></script>
</head>

<body class="sideNavVisible separateOnPageNav">
  <div class="fixedHeaderContainer">
    <div class="headerWrapper wrapper">
      <header><a href="https://developers.libra.org/"><img class="logo" src="libra-nav-logo.png" alt="Libra" />
          <h2 class="headerTitleWithLogo">Libra</h2>
        </a>
        <div class="navigationWrapper navigationSlider">
          <nav class="slidingNav">
            <ul class="nav-site nav-site-internal">
              <li class=""><a href="https://violas.io/">Home</a></li>
              <li class="siteNavGroupActive"><a href="welcome-to-libra.htm" target="_self">Documentation</a></li>
              <li class=""><a href="https://community.libra.org" target="_self">Community</a></li>
              <li class=""><a href="blog_2.html" target="_self">Blog</a></li>
              <li class=""><a href="https://libra.org" target="_self">libra.org</a></li>
              <li class=""><a href="https://github.com/libra/libra" target="_self">GitHub</a></li>
              <li class=""><a href="../lib_doc_en2cn/libra-cli.htm" target="_self">中/EN</a></li>
              <li class="navSearchWrapper reactNavSearchWrapper"><input type="text" id="search_input_react"
                  placeholder="Search" title="Search" /></li>
            </ul>
          </nav>
        </div>
      </header>
    </div>
  </div>
  <div class="navPusher">
    <div class="docMainWrapper wrapper">
      <div class="docsNavContainer" id="docsNav">
        <nav class="toc">
          <div class="toggleNav">
            <section class="navWrapper wrapper">
              <div class="navBreadcrumb wrapper">
                <div class="navToggle" id="navToggler">
                  <div class="hamburger-menu">
                    <div class="line1"></div>
                    <div class="line2"></div>
                    <div class="line3"></div>
                  </div>
                </div>
                <h2><i>›</i><span>Reference</span></h2>
                <div class="tocToggler" id="tocToggler"><i class="icon-toc"></i></div>
              </div>
              <div class="navGroups">
                <div class="navGroup">
                  <h3 class="navGroupCategoryTitle">Learn About Libra</h3>
                  <ul class="">
                    <li class="navListItem"><a class="navItem" href="welcome-to-libra.htm">Welcome</a></li>
                    <li class="navListItem"><a class="navItem" href="libra-protocol.htm">Libra Protocol: Key
                        Concepts</a></li>
                    <li class="navListItem"><a class="navItem" href="life-of-a-transaction.htm">Life of a
                        Transaction</a></li>
                    <div class="navGroup subNavGroup">
                      <h4 class="navGroupSubcategoryTitle">Technical Papers</h4>
                      <ul>
                        <li class="navListItem"><a class="navItem" href="the-libra-blockchain-paper.htm">The Libra
                            Blockchain</a></li>
                        <li class="navListItem"><a class="navItem" href="move-paper.htm">Move: A Language With
                            Programmable Resources</a></li>
                        <li class="navListItem"><a class="navItem" href="state-machine-replication-paper.htm">State
                            Machine Replication in the Libra Blockchain</a></li>
                      </ul>
                    </div>
                  </ul>
                </div>
                <div class="navGroup">
                  <h3 class="navGroupCategoryTitle">Try Libra Core</h3>
                  <ul class="">
                    <li class="navListItem"><a class="navItem" href="my-first-transaction.htm">My First Transaction</a>
                    </li>
                    <li class="navListItem"><a class="navItem" href="move-overview.htm">Getting Started With Move</a>
                    </li>
                    <li class="navListItem"><a class="navItem" href="run-local-network.htm">Run a Local Network</a></li>
                    <li class="navListItem"><a class="navItem" href="run-move-locally.htm">Run Move Programs Locally</a>
                    </li>
                  </ul>
                </div>
                <div class="navGroup">
                  <h3 class="navGroupCategoryTitle">Community</h3>
                  <ul class="">
                    <li class="navListItem"><a class="navItem" href="libra-open-source-paper.htm">Libra Open Source</a>
                    </li>
                    <li class="navListItem"><a class="navItem" href="contributing.htm">Contribution Guide</a></li>
                    <li class="navListItem"><a class="navItem" href="coding-guidelines.htm">Coding Guidelines</a></li>
                    <li class="navListItem"><a class="navItem" href="security.htm">Reporting Vulnerabilities</a></li>
                  </ul>
                </div>
                <div class="navGroup">
                  <h3 class="navGroupCategoryTitle">Libra Codebase</h3>
                  <ul class="">
                    <li class="navListItem"><a class="navItem" href="libra-core-overview.htm">Libra Core Overview</a>
                    </li>
                    <div class="navGroup subNavGroup">
                      <h4 class="navGroupSubcategoryTitle">READMEs</h4>
                      <ul>
                        <li class="navListItem"><a class="navItem" href="admission-control.htm">Admission Control</a>
                        </li>
                        <li class="navListItem"><a class="navItem" href="bytecode-verifier.htm">Bytecode Verifier</a>
                        </li>
                        <li class="navListItem"><a class="navItem" href="consensus.htm">Consensus</a></li>
                        <li class="navListItem"><a class="navItem" href="crypto.htm">Crypto</a></li>
                        <li class="navListItem"><a class="navItem" href="execution.htm">Execution</a></li>
                        <li class="navListItem"><a class="navItem" href="mempool.htm">Mempool</a></li>
                        <li class="navListItem"><a class="navItem" href="ir-to-bytecode.htm">Move IR Compiler</a></li>
                        <li class="navListItem"><a class="navItem" href="move-language.htm">Move Language</a></li>
                        <li class="navListItem"><a class="navItem" href="network.htm">Network</a></li>
                        <li class="navListItem"><a class="navItem" href="storage.htm">Storage</a></li>
                        <li class="navListItem"><a class="navItem" href="vm.htm">Virtual Machine</a></li>
                      </ul>
                    </div>
                  </ul>
                </div>
                <div class="navGroup">
                  <h3 class="navGroupCategoryTitle">Reference</h3>
                  <ul class="">
                    <li class="navListItem navListItemActive"><a class="navItem" href="libra-cli.htm">Libra CLI</a></li>
                    <li class="navListItem"><a class="navItem" href="glossary.htm">Glossary</a></li>
                  </ul>
                </div>
              </div>
            </section>
          </div>
          <script>
            var coll = document.getElementsByClassName('collapsible');
            var checkActiveCategory = true;
            for (var i = 0; i < coll.length; i++) {
              var links = coll[i].nextElementSibling.getElementsByTagName('*');
              if (checkActiveCategory) {
                for (var j = 0; j < links.length; j++) {
                  if (links[j].classList.contains('navListItemActive')) {
                    coll[i].nextElementSibling.classList.toggle('hide');
                    coll[i].childNodes[1].classList.toggle('rotate');
                    checkActiveCategory = false;
                    break;
                  }
                }
              }

              coll[i].addEventListener('click', function () {
                var arrow = this.childNodes[1];
                arrow.classList.toggle('rotate');
                var content = this.nextElementSibling;
                content.classList.toggle('hide');
              });
            }

            document.addEventListener('DOMContentLoaded', function () {
              createToggler('#navToggler', '#docsNav', 'docsSliderActive');
              createToggler('#tocToggler', 'body', 'tocActive');

              var headings = document.querySelector('.toc-headings');
              headings && headings.addEventListener('click', function (event) {
                var el = event.target;
                while (el !== headings) {
                  if (el.tagName === 'A') {
                    document.body.classList.remove('tocActive');
                    break;
                  } else {
                    el = el.parentNode;
                  }
                }
              }, false);

              function createToggler(togglerSelector, targetSelector, className) {
                var toggler = document.querySelector(togglerSelector);
                var target = document.querySelector(targetSelector);

                if (!toggler) {
                  return;
                }

                toggler.onclick = function (event) {
                  event.preventDefault();

                  target.classList.toggle(className);
                };
              }
            });
          </script>
        </nav>
      </div>
      <div class="container mainContainer">
        <div class="wrapper">
          <div class="post">
            <header class="postHeader"><a class="edit-page-link button"
                href="https://github.com/libra/website/edit/master/docs/reference/libra-cli.md" target="_blank"
                rel="noreferrer noopener">Edit</a>
              <h1 class="postHeaderTitle">Libra CLI</h1>
            </header>
            <article>
              <div><span>
                  <p>This guide describes how to use the Libra command line interface (CLI) client to interact with the
                    Libra Blockchain. The CLI is invoked as an interactive shell. It provides basic commands to create
                    accounts, mint coins, perform transfers, and query the blockchain. You can use the CLI client to
                    interact with a validator node on the testnet, on a local Libra Blockchain, or on a remote
                    blockchain by specifying the node's hostname.</p>
                  <h2><a class="anchor" aria-hidden="true" id="invocation"></a><a href="libra-cli.htm#invocation"
                      aria-hidden="true" class="hash-link"><svg class="hash-link-icon" aria-hidden="true" height="16"
                        version="1.1" viewBox="0 0 16 16" width="16">
                        <path fill-rule="evenodd"
                          d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
                        </path>
                      </svg></a>Invocation</h2>
                  <p>There are three ways to invoke the Libra CLI client.</p>
                  <h3><a class="anchor" aria-hidden="true" id="connect-to-the-testnet-via-the-cli-client"></a><a
                      href="libra-cli.htm#connect-to-the-testnet-via-the-cli-client" aria-hidden="true"
                      class="hash-link"><svg class="hash-link-icon" aria-hidden="true" height="16" version="1.1"
                        viewBox="0 0 16 16" width="16">
                        <path fill-rule="evenodd"
                          d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
                        </path>
                      </svg></a>Connect to the Testnet via the CLI Client</h3>
                  <p>To connect to the testnet through the CLI, a convenience script can be used to invoke the CLI
                    without needing to specify parameters. To invoke this, change to the <code>libra</code> directory
                    and run:</p>
                  <pre><code class="hljs css language-bash">./scripts/cli/start_cli_testnet.sh
</code></pre>
                  <h3><a class="anchor" aria-hidden="true" id="run-a-local-libra-network-and-spawn-a-cli-client"></a><a
                      href="libra-cli.htm#run-a-local-libra-network-and-spawn-a-cli-client" aria-hidden="true"
                      class="hash-link"><svg class="hash-link-icon" aria-hidden="true" height="16" version="1.1"
                        viewBox="0 0 16 16" width="16">
                        <path fill-rule="evenodd"
                          d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
                        </path>
                      </svg></a>Run a Local Libra Network and Spawn a CLI Client</h3>
                  <p>To start a local Libra network and spawn a CLI client that connects to this local network, run:</p>
                  <pre><code class="hljs css language-bash">cargo run -p libra_swarm -- -s

</code></pre>
                  <p>The <code>-s</code> option causes the CLI to be run after the local Libra network is launched. Note
                    that this may take a few minutes to build and then start.</p>
                  <h3><a class="anchor" aria-hidden="true" id="run-a-cli-client-to-connect-to-any-libra-network"></a><a
                      href="libra-cli.htm#run-a-cli-client-to-connect-to-any-libra-network" aria-hidden="true"
                      class="hash-link"><svg class="hash-link-icon" aria-hidden="true" height="16" version="1.1"
                        viewBox="0 0 16 16" width="16">
                        <path fill-rule="evenodd"
                          d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
                        </path>
                      </svg></a>Run a CLI Client to Connect to Any Libra Network</h3>
                  <p>To invoke the CLI client and configure it yourself, run:</p>
                  <pre><code class="hljs css language-bash">cargo run -p client --bin client -- [OPTIONS] --host &lt;host&gt; --validator_set_file &lt;validator_set_file&gt;

</code></pre>
                  <h4><a class="anchor" aria-hidden="true" id="options"></a><a href="libra-cli.htm#options"
                      aria-hidden="true" class="hash-link"><svg class="hash-link-icon" aria-hidden="true" height="16"
                        version="1.1" viewBox="0 0 16 16" width="16">
                        <path fill-rule="evenodd"
                          d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
                        </path>
                      </svg></a>Options</h4>
                  <p>The options for running the CLI client command to connect to any Libra network are:</p>
                  <ul>
                    <li><code>-m | --faucet_key_file_path</code> — Path to the generated key-pair for the faucet
                      account. The faucet account can be used to mint coins. If not passed, a new key-pair will be
                      generated for you and placed in a temporary directory. To manually generate a keypair, use
                      generate_keypair: <code>cargo run -p generate_keypair -- -o &lt;output_file_path&gt;</code>.</li>
                    <li><code>-f | --faucet_server</code> — The host that operates a faucet service. If not passed, this
                      will be derived from the host parameter.</li>
                    <li><code>-a | —-host</code> — The destination host for CLI to connect to.</li>
                    <li><code>-p | -—port</code> — The public port of the destination Libra Blockchain for the client to
                      connect with, the default value is 30307.</li>
                    <li><code>-n | --mnemonic_file</code> — The file location from which to load the mnemonic word for
                      user account address/key generation. If not passed, a new mnemonic file is generated in the
                      current directory by libra_wallet.</li>
                    <li><code>-s | --validator_set_file</code> — File location from which to load config of trusted
                      validators. It is used to verify validator signatures in validator query response. The file should
                      at least include public key of all validators trusted by the client — which should typically be
                      all validators on the network. To connect to testnet, use
                      'libra/scripts/cli/trusted_peers.config.toml'. Can be generated by libra-config for local testing:
                      <code>cargo run --bin libra-config</code> but the preferred method is to simply use libra-swarm to
                      run local networks.</li>
                  </ul>
                  <h2><a class="anchor" aria-hidden="true" id="commands"></a><a href="libra-cli.htm#commands"
                      aria-hidden="true" class="hash-link"><svg class="hash-link-icon" aria-hidden="true" height="16"
                        version="1.1" viewBox="0 0 16 16" width="16">
                        <path fill-rule="evenodd"
                          d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
                        </path>
                      </svg></a>Commands</h2>
                  <p>Once started with any of the three commands previously mentioned, the following CLI commands are
                    available:</p>
                  <pre><code class="hljs css language-plaintext">major_command subcommand [options]
</code></pre>
                  <p>If you enter only the major command, it will show the help information for that command. Major
                    commands can be any one of the following:</p>
                  <hr>
                  <h4><a class="anchor" aria-hidden="true"
                      id="account-a-mdash-account-related-operations-subcommands-include"></a><a
                      href="libra-cli.htm#account-a-mdash-account-related-operations-subcommands-include"
                      aria-hidden="true" class="hash-link"><svg class="hash-link-icon" aria-hidden="true" height="16"
                        version="1.1" viewBox="0 0 16 16" width="16">
                        <path fill-rule="evenodd"
                          d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
                        </path>
                      </svg></a><code>account | a</code> — Account related operations. Subcommands include:</h4>
                  <p><code>create | c</code> — Create a random account with private/public key pair. Account information
                    will be held in memory only. The created account will not be saved to the chain.</p>
                  <pre><code class="hljs">   Usage:
    create|c
</code></pre>
                  <p><code>list | la</code> — Print all accounts that were created or loaded.</p>
                  <pre><code class="hljs"> Usage:
    list|la
</code></pre>
                  <p><code>recover | r &lt;file_path&gt;</code> — Recover all accounts that were written to a file via
                    the <code>account write</code> command.</p>
                  <pre><code class="hljs"> Usage:
    recover|r &lt;file_path&gt;
 Arguments:
     file_path - File path from which to load mnemonic recover seed.  Must have been written via `account write`
</code></pre>
                  <p><code>write | w &lt;file path&gt;</code> — Save Libra wallet mnemonic recovery seed to disk. This
                    will allow accounts to be recovered via <code>account recover</code>.</p>
                  <pre><code class="hljs"> Usage:
    write|w &lt;file_path&gt;
 Arguments:
     file_path - File path at which to save the mnemonic recovery seed to disk.
</code></pre>
                  <p><code>&lt;mint | m&gt; | &lt;mintb| mb&gt;</code> — Mint coins to the account. Suffix 'b' is for
                    blocking. If blocking is specified (using suffix 'b'), CLI will query chain until the transaction is
                    finalized/available. Same is true for other sub &quot;blocking&quot; commands.</p>
                  <pre><code class="hljs">  Usage:
    mint|mint|m|b &lt;receiver_account_ref_id&gt;|&lt;receiver_account_address&gt; &lt;number_of_coins&gt;
  Arguments:
      receiver_account_ref_id | receiver_account_address - The receiver account to mint the coins to.
            If the receiver account does not exist, it will be created first.
            Either receiver_account_address or receiver_account_ref_id (an internal index of
            the account in the CLI client) can be used to specify receiver account (as in
            other commands). If gas is being charged, the account that sent this mint transaction
            (currently preloaded genesis account) pays for the gas.
      number_of_coins - The number of coins to be minted to the receiver account.
</code></pre>
                  <hr>
                  <h4><a class="anchor" aria-hidden="true"
                      id="transfer-transferb-t-tb-mdash-transfer-coins-from-one-account-to-another-suffix-b-is-for-blocking"></a><a
                      href="libra-cli.htm#transfer-transferb-t-tb-mdash-transfer-coins-from-one-account-to-another-suffix-b-is-for-blocking"
                      aria-hidden="true" class="hash-link"><svg class="hash-link-icon" aria-hidden="true" height="16"
                        version="1.1" viewBox="0 0 16 16" width="16">
                        <path fill-rule="evenodd"
                          d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
                        </path>
                      </svg></a><code>transfer | transferb | t | tb</code> — Transfer coins from one account to another.
                    Suffix 'b' is for blocking.</h4>
                  <pre><code class="hljs">Usage:
    transfer|transferb|t|tb &lt;sender_account_address&gt;|&lt;sender_account_ref_id&gt; &lt;receiver_account_address&gt;|&lt;receiver_account_ref_id&gt; &lt;number_of_coins&gt; [gas_unit_price (default=0)] [max_gas_amount (default 10000)]
Arguments:
    sender_account_address | sender_account_ref_id - The account from which this transfer transaction
        is sent. The sender account pays for the gas.
    receive_account_address | receiver_account_ref_id - The account to which this transaction sends coins.
        If the receiver account does not exist, it will be created first. The sender will pay for
        gas required for both account creation and coin transfer.
    number_of_coins - The number of coins transferred to receiver account.
    gas_unit_price - The unit price to pay for gas.
    max_gas_amount - Max units of gas user is willing to pay for this transaction.
</code></pre>
                  <hr>
                  <h4><a class="anchor" aria-hidden="true"
                      id="query-q-mdash-query-data-from-destination-chain-all-query-operations-are-blocking-subcommands-include"></a><a
                      href="libra-cli.htm#query-q-mdash-query-data-from-destination-chain-all-query-operations-are-blocking-subcommands-include"
                      aria-hidden="true" class="hash-link"><svg class="hash-link-icon" aria-hidden="true" height="16"
                        version="1.1" viewBox="0 0 16 16" width="16">
                        <path fill-rule="evenodd"
                          d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
                        </path>
                      </svg></a><code>query | q</code> — Query data from destination chain. All query operations are
                    blocking. Subcommands include:</h4>
                  <p><code>balance | b</code> — Get the current balance of an account</p>
                  <pre><code class="hljs"> Usage:
    balance | b &lt;account_ref_id&gt;|&lt;account_address&gt;
 Arguments:
     account_ref_id | account_address - The account to query balance for.
</code></pre>
                  <p><code>sequence | s</code> — Get the current sequence number for an account.</p>
                  <pre><code class="hljs">  Usage:
    sequence | s &lt;account_ref_id&gt;|&lt;account_address&gt; [reset_sequence_number=true|false]
  Arguments:
      account_ref_id | account_address - The account to get current/latest sequence number.
      reset_sequence_number - If the sequence number known locally by the CLI differs from the
            value known on chain, this will reset the local sequence number to to on-chain
            value.  This is useful when a user encounters an invalid sequence number error.
</code></pre>
                  <p><code>account_state | as</code> — Get the latest state for an account.</p>
                  <pre><code class="hljs">  Usage:
    account_state | as &lt;account_ref_id&gt;|&lt;account_address&gt;
  Arguments:
      account_ref_id | account_address - The account to query latest state.
</code></pre>
                  <p><code>txn_acc_seq | ts</code> — Get the committed transaction by account and sequence number.</p>
                  <pre><code class="hljs">  Usage:
    txn_acc_seq | ts &lt;account_ref_id&gt;|&lt;account_address&gt; &lt;sequence_number&gt; &lt;fetch_events=true|false&gt;
  Arguments:
      account_ref_id | account_address - The account to query committed transaction.
      sequence_number - The sequence number of committed transaction.
      fetch_events - Set to true to fetch events emitted by this transaction.
</code></pre>
                  <p><code>txn_range | tr</code> — Get the committed transaction by range</p>
                  <pre><code class="hljs">  Usage:
    txn_range | tr &lt;start_version&gt; &lt;limit&gt; &lt;fetch_events=true|false&gt;
  Arguments:
      start_version - The version to query the transaction from.
      limit - The maximum number of transactions to query.
      fetch_events - Set to true to fetch events emitted by each transaction.
</code></pre>
                  <p><code>event | ev</code> — Get event by account and path.</p>
                  <pre><code class="hljs">  Usage:
    event | ev &lt;account_ref_id&gt;|&lt;account_address&gt; &lt;sent|received&gt; &lt;start_sequence_number&gt; &lt;ascending=true|false&gt; &lt;limit&gt;
  Arguments:
      account_ref_id | account_address - The account to query events from.
      sent | received - Fetch sent or received events for this account.
            Note that this will later evolve into selecting any event path.
      start_sequence_number - The sequence number of events to query starting from.
      ascending - The direction of query from start_sequence_number.
      limit - The maximum number of events to query.
      ---
</code></pre>
                  <h4><a class="anchor" aria-hidden="true"
                      id="dev-d-mdash-operations-related-to-move-transaction-scripts-and-modules"></a><a
                      href="libra-cli.htm#dev-d-mdash-operations-related-to-move-transaction-scripts-and-modules"
                      aria-hidden="true" class="hash-link"><svg class="hash-link-icon" aria-hidden="true" height="16"
                        version="1.1" viewBox="0 0 16 16" width="16">
                        <path fill-rule="evenodd"
                          d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
                        </path>
                      </svg></a>dev | d — Operations related to Move transaction scripts and modules.</h4>
                  <blockquote class="block_note">
                    <p><strong>Note:</strong> This command can only be used on a local network, it cannot be used on
                      testnet.</p>
                  </blockquote>
                  <p>Subcommands include:</p>
                  <p><code>compile | c</code> — Compile a Move program.</p>
                  <pre><code class="hljs">Usage:
  compile | c &lt;sender_account_address&gt;|&lt;sender_account_ref_id&gt; &lt;file_path&gt; &lt;module|script&gt; [output_file_path (compile into tmp file by default)]
Arguments:
  sender_account_address|sender_account_ref_id - Address of the sender account|Local index of the sender account.
  module|script - Distinguishes between move modules and move scripts.
  file_path - Path to the source Move program written in Intermediate Representation (IR).
  output_file_path - (Optional) Where the compiled module will be saved.
</code></pre>
                  <p><code>publish | p</code> — Publish a Move module on the local blockchain.</p>
                  <pre><code class="hljs">Usage:
  publish | p &lt;sender_account_address&gt;|&lt;sender_account_ref_id&gt; &lt;compiled_module_path&gt;
Arguments:
  sender_account_address|sender_account_ref_id - Address of the sender account|Local index of the sender account
  compiled_module_path - Path to the compiled module.
</code></pre>
                  <p><code>execute | e</code> — Execute Move transaction script.</p>
                  <pre><code class="hljs">Usage:
  execute|e &lt;sender_account_address&gt;|&lt;sender_account_ref_id&gt; &lt;compiled_module_path&gt; [script args]
Arguments:
  sender_account_address|sender_account_ref_id - Address of sender account|Local index of the sender account.
  compiled_module_path -  Path to the compiled transaction script.
  script args - Arguments expected by the transaction script.
</code></pre>
                  <hr>
                  <p><strong><code>quit | q!</code> — Exits the CLI. No subcommand is required.</strong></p>
                  <hr>
                  <p><strong><code>help | h</code> — Prints help. No subcommand is required.</strong></p>
                  <h3><a class="anchor" aria-hidden="true" id="account-creation-minting-faucet-for-testnet"></a><a
                      href="libra-cli.htm#account-creation-minting-faucet-for-testnet" aria-hidden="true"
                      class="hash-link"><svg class="hash-link-icon" aria-hidden="true" height="16" version="1.1"
                        viewBox="0 0 16 16" width="16">
                        <path fill-rule="evenodd"
                          d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
                        </path>
                      </svg></a>Account Creation/Minting (Faucet) for Testnet</h3>
                  <p>Account creation provided by the CLI generates a local keypair, but nothing is created on the
                    blockchain. To create an account on the blockchain:</p>
                  <ul>
                    <li>Transfer coins to the address you wish to create. If the recipient account does not exist, the
                      recipient account will be created first and then coins will be transferred. The sender pays for
                      both account creation and transfer.</li>
                    <li>Send a mint transaction to mint coins to an account. If the account does not exist, the account
                      will be created first and the coins wil be minted later. Unlike other transactions, a nonexistent
                      account itself can request a mint transaction. For the testnet, there is no explicit limit on how
                      many coins an account can mint. It's designed to allow the users to create coins to experiment on
                      the testnet.</li>
                  </ul>
                </span></div>
            </article>
          </div>
          <div class="docs-prevnext"><a class="docs-prev button" href="vm.htm"><span class="arrow-prev">←
              </span><span>Virtual Machine</span></a><a class="docs-next button"
              href="glossary.htm"><span>Glossary</span><span class="arrow-next"> →</span></a></div>
        </div>
      </div>
      <nav class="onPageNav">
        <ul class="toc-headings">
          <li><a href="libra-cli.htm#invocation">Invocation</a>
            <ul class="toc-headings">
              <li><a href="libra-cli.htm#connect-to-the-testnet-via-the-cli-client">Connect to the Testnet via the CLI
                  Client</a></li>
              <li><a href="libra-cli.htm#run-a-local-libra-network-and-spawn-a-cli-client">Run a Local Libra Network and
                  Spawn a CLI Client</a></li>
              <li><a href="libra-cli.htm#run-a-cli-client-to-connect-to-any-libra-network">Run a CLI Client to Connect
                  to Any Libra Network</a></li>
            </ul>
          </li>
          <li><a href="libra-cli.htm#commands">Commands</a>
            <ul class="toc-headings">
              <li><a href="libra-cli.htm#account-creation-minting-faucet-for-testnet">Account Creation/Minting (Faucet)
                  for Testnet</a></li>
            </ul>
          </li>
        </ul>
      </nav>
    </div>
    <footer class="nav-footer" id="footer">
        <section class="sitemap"><a href="https://developers.libra.org/" class="nav-home"><img
              src="libra-logomark-white.png" alt="Libra" /></a>
          <div class="footerSection">
            <h5>Learn About Libra</h5><a href="welcome-to-libra.htm">Welcome to Libra</a><a
              href="libra-protocol.htm">Libra Protocol</a><a href="the-libra-blockchain-paper.htm">Libra Blockchain</a><a
              href="life-of-a-transaction.htm">Life of a Transaction</a>
            <p></p>
            <h5>Try Libra Core </h5><a href="my-first-transaction.htm">My First Transaction</a><a
              href="move-overview.htm">Getting Started With Move</a>
          </div>
          <div class="footerSection">
            <h5>Policies</h5><a href="privacy-policy.htm">Privacy Policy</a><a href="terms-of-use.htm">Terms of Use</a><a
              href="cookies-policy.htm">Cookies Policy</a><a href="code-of-conduct.htm">Code of Conduct</a>
            <p></p>
            <h5>Community</h5><a href="https://community.libra.org/">Developer Forum</a><a
              href="https://developers.libra.org/newsletter_form">Newsletter</a>
          </div>
          <div class="footerSection">
            <h5>Libra Developer Community</h5>
            <img style="width:300px" src='qr_violas.png'>
            <h5>Join us with scan and enter libra<h5>
          </div>
        </section>
        <section class="copyright"> © Violas Association</section>
      </footer>
  </div>
  <script type="text/javascript" src="https://cdn.jsdelivr.net/docsearch.js/1/docsearch.min.js"></script>
  <script>
    document.addEventListener('keyup', function (e) {
      if (e.target !== document.body) {
        return;
      }
      // keyCode for '/' (slash)
      if (e.keyCode === 191) {
        const search = document.getElementById('search_input_react');
        search && search.focus();
      }
    });
  </script>
  <script>
    var search = docsearch({

      apiKey: '0d48ee629d39ddc4916eeef7755a0c4c',
      indexName: 'libra',
      inputSelector: '#search_input_react'
    });
  </script>
</body>

</html>